{"ast":null,"code":"import firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { __assign, __awaiter, __generator } from 'tslib';\nimport { Logger } from '@firebase/logger';\nimport { ErrorFactory } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ANALYTICS_ID_FIELD = 'measurementId';\n// Key to attach FID to in gtag params.\nvar GA_FID_KEY = 'firebase_id';\nvar ORIGIN_KEY = 'origin';\nvar GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\nvar GtagCommand;\n(function (GtagCommand) {\n  GtagCommand[\"EVENT\"] = \"event\";\n  GtagCommand[\"SET\"] = \"set\";\n  GtagCommand[\"CONFIG\"] = \"config\";\n})(GtagCommand || (GtagCommand = {}));\n/*\r\n * Officially recommended event names for gtag.js\r\n * Any other string is also allowed.\r\n */\nvar EventName;\n(function (EventName) {\n  EventName[\"ADD_SHIPPING_INFO\"] = \"add_shipping_info\";\n  EventName[\"ADD_PAYMENT_INFO\"] = \"add_payment_info\";\n  EventName[\"ADD_TO_CART\"] = \"add_to_cart\";\n  EventName[\"ADD_TO_WISHLIST\"] = \"add_to_wishlist\";\n  EventName[\"BEGIN_CHECKOUT\"] = \"begin_checkout\";\n  /** @deprecated */\n  EventName[\"CHECKOUT_PROGRESS\"] = \"checkout_progress\";\n  EventName[\"EXCEPTION\"] = \"exception\";\n  EventName[\"GENERATE_LEAD\"] = \"generate_lead\";\n  EventName[\"LOGIN\"] = \"login\";\n  EventName[\"PAGE_VIEW\"] = \"page_view\";\n  EventName[\"PURCHASE\"] = \"purchase\";\n  EventName[\"REFUND\"] = \"refund\";\n  EventName[\"REMOVE_FROM_CART\"] = \"remove_from_cart\";\n  EventName[\"SCREEN_VIEW\"] = \"screen_view\";\n  EventName[\"SEARCH\"] = \"search\";\n  EventName[\"SELECT_CONTENT\"] = \"select_content\";\n  EventName[\"SELECT_ITEM\"] = \"select_item\";\n  EventName[\"SELECT_PROMOTION\"] = \"select_promotion\";\n  /** @deprecated */\n  EventName[\"SET_CHECKOUT_OPTION\"] = \"set_checkout_option\";\n  EventName[\"SHARE\"] = \"share\";\n  EventName[\"SIGN_UP\"] = \"sign_up\";\n  EventName[\"TIMING_COMPLETE\"] = \"timing_complete\";\n  EventName[\"VIEW_CART\"] = \"view_cart\";\n  EventName[\"VIEW_ITEM\"] = \"view_item\";\n  EventName[\"VIEW_ITEM_LIST\"] = \"view_item_list\";\n  EventName[\"VIEW_PROMOTION\"] = \"view_promotion\";\n  EventName[\"VIEW_SEARCH_RESULTS\"] = \"view_search_results\";\n})(EventName || (EventName = {}));\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Logs an analytics event through the Firebase SDK.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\r\n * @param eventParams Analytics event parameters.\r\n */\nfunction _logEvent(gtagFunction, analyticsId, eventName, eventParams, options) {\n  var params = eventParams || {};\n  if (!options || !options.global) {\n    params = __assign(__assign({}, eventParams), {\n      'send_to': analyticsId\n    });\n  }\n  // Workaround for http://b/141370449 - third argument cannot be undefined.\n  gtagFunction(GtagCommand.EVENT, eventName, params || {});\n}\n// TODO: Brad is going to add `screen_name` to GA Gold config parameter schema\n/**\r\n * Set screen_name parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param screenName Screen name string to set.\r\n */\nfunction _setCurrentScreen(gtagFunction, analyticsId, screenName, options) {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, {\n      'screen_name': screenName\n    });\n  } else {\n    gtagFunction(GtagCommand.CONFIG, analyticsId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n/**\r\n * Set user_id parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param id User ID string to set\r\n */\nfunction _setUserId(gtagFunction, analyticsId, id, options) {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, {\n      'user_id': id\n    });\n  } else {\n    gtagFunction(GtagCommand.CONFIG, analyticsId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n/**\r\n * Set all other user properties other than user_id and screen_name.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param properties Map of user properties to set\r\n */\nfunction _setUserProperties(gtagFunction, analyticsId, properties, options) {\n  if (options && options.global) {\n    var flatProperties = {};\n    for (var _i = 0, _a = Object.keys(properties); _i < _a.length; _i++) {\n      var key = _a[_i];\n      // use dot notation for merge behavior in gtag.js\n      flatProperties[\"user_properties.\" + key] = properties[key];\n    }\n    gtagFunction(GtagCommand.SET, flatProperties);\n  } else {\n    gtagFunction(GtagCommand.CONFIG, analyticsId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n/**\r\n * Set whether collection is enabled for this ID.\r\n *\r\n * @param enabled If true, collection is enabled for this ID.\r\n */\nfunction _setAnalyticsCollectionEnabled(analyticsId, enabled) {\n  window[\"ga-disable-\" + analyticsId] = !enabled;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar logger = new Logger('@firebase/analytics');\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Initialize the analytics instance in gtag.js by calling config command with fid.\r\n *\r\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\r\n * part of the `page_view` event that's sent during the initialization\r\n * @param app Firebase app\r\n * @param gtagCore The gtag function that's not wrapped.\r\n */\nfunction initializeGAId(app, installations, gtagCore) {\n  return __awaiter(this, void 0, void 0, function () {\n    var fid;\n    var _a;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4 /*yield*/, installations.getId()];\n        case 1:\n          fid = _b.sent();\n          // This command initializes gtag.js and only needs to be called once for the entire web app,\n          // but since it is idempotent, we can call it multiple times.\n          // We keep it together with other initialization logic for better code structure.\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          gtagCore('js', new Date());\n          // It should be the first config command called on this GA-ID\n          // Initialize this GA-ID and set FID on it using the gtag config API.\n          gtagCore(GtagCommand.CONFIG, app.options[ANALYTICS_ID_FIELD], (_a = {}, _a[GA_FID_KEY] = fid,\n          // guard against developers accidentally setting properties with prefix `firebase_`\n          _a[ORIGIN_KEY] = 'firebase', _a.update = true, _a));\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\nfunction insertScriptTag(dataLayerName) {\n  var script = document.createElement('script');\n  // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n  script.src = GTAG_URL + \"?l=\" + dataLayerName;\n  script.async = true;\n  document.head.appendChild(script);\n}\n/** Get reference to, or create, global datalayer.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\")\r\n */\nfunction getOrCreateDataLayer(dataLayerName) {\n  // Check for existing dataLayer and create if needed.\n  var dataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName];\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n/**\r\n * Wraps a standard gtag function with extra code to wait for completion of\r\n * relevant initialization promises before sending requests.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer\r\n * @param initializedIdPromisesMap Map of gaIds to their initialization promises\r\n */\nfunction wrapGtag(gtagCore, initializedIdPromisesMap) {\n  return function (command, idOrNameOrParams, gtagParams) {\n    // If event, check that relevant initialization promises have completed.\n    if (command === GtagCommand.EVENT) {\n      var initializationPromisesToWaitFor = [];\n      // If there's a 'send_to' param, check if any ID specified matches\n      // a FID we have begun a fetch on.\n      if (gtagParams && gtagParams['send_to']) {\n        var gaSendToList = gtagParams['send_to'];\n        // Make it an array if is isn't, so it can be dealt with the same way.\n        if (!Array.isArray(gaSendToList)) {\n          gaSendToList = [gaSendToList];\n        }\n        for (var _i = 0, gaSendToList_1 = gaSendToList; _i < gaSendToList_1.length; _i++) {\n          var sendToId = gaSendToList_1[_i];\n          var initializationPromise = initializedIdPromisesMap[sendToId];\n          // Groups will not be in the map.\n          if (initializationPromise) {\n            initializationPromisesToWaitFor.push(initializationPromise);\n          } else {\n            // There is an item in 'send_to' that is not associated\n            // directly with an FID, possibly a group.  Empty this array\n            // and let it get populated below.\n            initializationPromisesToWaitFor = [];\n            break;\n          }\n        }\n      }\n      // This will be unpopulated if there was no 'send_to' field , or\n      // if not all entries in the 'send_to' field could be mapped to\n      // a FID. In these cases, wait on all pending initialization promises.\n      if (initializationPromisesToWaitFor.length === 0) {\n        for (var _a = 0, _b = Object.values(initializedIdPromisesMap); _a < _b.length; _a++) {\n          var idPromise = _b[_a];\n          initializationPromisesToWaitFor.push(idPromise);\n        }\n      }\n      // Run core gtag function with args after all relevant initialization\n      // promises have been resolved.\n      Promise.all(initializationPromisesToWaitFor)\n      // Workaround for http://b/141370449 - third argument cannot be undefined.\n      .then(function () {\n        return gtagCore(GtagCommand.EVENT, idOrNameOrParams, gtagParams || {});\n      }).catch(function (e) {\n        return logger.error(e);\n      });\n    } else if (command === GtagCommand.CONFIG) {\n      var initializationPromiseToWait = initializedIdPromisesMap[idOrNameOrParams] || Promise.resolve();\n      initializationPromiseToWait.then(function () {\n        gtagCore(GtagCommand.CONFIG, idOrNameOrParams, gtagParams);\n      }).catch(function (e) {\n        return logger.error(e);\n      });\n    } else {\n      // SET command.\n      // Splitting calls for CONFIG and SET to make it clear which signature\n      // Typescript is checking.\n      gtagCore(GtagCommand.SET, idOrNameOrParams);\n    }\n  };\n}\n/**\r\n * Creates global gtag function or wraps existing one if found.\r\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\r\n * 'event' calls that belong to the GAID associated with this Firebase instance.\r\n *\r\n * @param initializedIdPromisesMap Map of gaId to initialization promises.\r\n * @param dataLayerName Name of global GA datalayer array.\r\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified)\r\n */\nfunction wrapOrCreateGtag(initializedIdPromisesMap, dataLayerName, gtagFunctionName) {\n  // Create a basic core gtag function\n  var gtagCore = function gtagCore() {\n    var _args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      _args[_i] = arguments[_i];\n    }\n    // Must push IArguments object, not an array.\n    window[dataLayerName].push(arguments);\n  };\n  // Replace it with existing one if found\n  if (window[gtagFunctionName] && typeof window[gtagFunctionName] === 'function') {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n  window[gtagFunctionName] = wrapGtag(gtagCore, initializedIdPromisesMap);\n  return {\n    gtagCore: gtagCore,\n    wrappedGtag: window[gtagFunctionName]\n  };\n}\n/**\r\n * Returns first script tag in DOM matching our gtag url pattern.\r\n */\nfunction findGtagScriptOnPage() {\n  var scriptTags = window.document.getElementsByTagName('script');\n  for (var _i = 0, _a = Object.values(scriptTags); _i < _a.length; _i++) {\n    var tag = _a[_i];\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n  return null;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar _a;\nvar ERRORS = (_a = {}, _a[\"no-ga-id\" /* NO_GA_ID */] = \"\\\"\" + ANALYTICS_ID_FIELD + \"\\\" field is empty in \" + 'Firebase config. Firebase Analytics ' + 'requires this field to contain a valid measurement ID.', _a[\"already-exists\" /* ALREADY_EXISTS */] = 'A Firebase Analytics instance with the measurement ID ${id} ' + ' already exists. ' + 'Only one Firebase Analytics instance can be created for each measurement ID.', _a[\"already-initialized\" /* ALREADY_INITIALIZED */] = 'Firebase Analytics has already been initialized.' + 'settings() must be called before initializing any Analytics instance' + 'or it will have no effect.', _a[\"interop-component-reg-failed\" /* INTEROP_COMPONENT_REG_FAILED */] = 'Firebase Analytics Interop Component failed to instantiate', _a);\nvar ERROR_FACTORY = new ErrorFactory('analytics', 'Analytics', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Maps gaId to FID fetch promises.\r\n */\nvar initializedIdPromisesMap = {};\n/**\r\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\r\n */\nvar dataLayerName = 'dataLayer';\n/**\r\n * Name for window global gtag function used by GA: defaults to 'gtag'.\r\n */\nvar gtagName = 'gtag';\n/**\r\n * Reproduction of standard gtag function or reference to existing\r\n * gtag function on window object.\r\n */\nvar gtagCoreFunction;\n/**\r\n * Wrapper around gtag function that ensures FID is sent with all\r\n * relevant event and config calls.\r\n */\nvar wrappedGtagFunction;\n/**\r\n * Flag to ensure page initialization steps (creation or wrapping of\r\n * dataLayer and gtag script) are only run once per page load.\r\n */\nvar globalInitDone = false;\n/**\r\n * For testing\r\n */\nfunction resetGlobalVars(newGlobalInitDone, newGaInitializedPromise) {\n  if (newGlobalInitDone === void 0) {\n    newGlobalInitDone = false;\n  }\n  if (newGaInitializedPromise === void 0) {\n    newGaInitializedPromise = {};\n  }\n  globalInitDone = newGlobalInitDone;\n  initializedIdPromisesMap = newGaInitializedPromise;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n/**\r\n * For testing\r\n */\nfunction getGlobalVars() {\n  return {\n    initializedIdPromisesMap: initializedIdPromisesMap\n  };\n}\n/**\r\n * This must be run before calling firebase.analytics() or it won't\r\n * have any effect.\r\n * @param options Custom gtag and dataLayer names.\r\n */\nfunction settings(options) {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(\"already-initialized\" /* ALREADY_INITIALIZED */);\n  }\n\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\nfunction factory(app, installations) {\n  var analyticsId = app.options[ANALYTICS_ID_FIELD];\n  if (!analyticsId) {\n    throw ERROR_FACTORY.create(\"no-ga-id\" /* NO_GA_ID */);\n  }\n\n  if (initializedIdPromisesMap[analyticsId] != null) {\n    throw ERROR_FACTORY.create(\"already-exists\" /* ALREADY_EXISTS */, {\n      id: analyticsId\n    });\n  }\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n    // Detect if user has already put the gtag <script> tag on this page.\n    if (!findGtagScriptOnPage()) {\n      insertScriptTag(dataLayerName);\n    }\n    getOrCreateDataLayer(dataLayerName);\n    var _a = wrapOrCreateGtag(initializedIdPromisesMap, dataLayerName, gtagName),\n      wrappedGtag = _a.wrappedGtag,\n      gtagCore = _a.gtagCore;\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  initializedIdPromisesMap[analyticsId] = initializeGAId(app, installations, gtagCoreFunction);\n  var analyticsInstance = {\n    app: app,\n    logEvent: function logEvent(eventName, eventParams, options) {\n      return _logEvent(wrappedGtagFunction, analyticsId, eventName, eventParams, options);\n    },\n    setCurrentScreen: function setCurrentScreen(screenName, options) {\n      return _setCurrentScreen(wrappedGtagFunction, analyticsId, screenName, options);\n    },\n    setUserId: function setUserId(id, options) {\n      return _setUserId(wrappedGtagFunction, analyticsId, id, options);\n    },\n    setUserProperties: function setUserProperties(properties, options) {\n      return _setUserProperties(wrappedGtagFunction, analyticsId, properties, options);\n    },\n    setAnalyticsCollectionEnabled: function setAnalyticsCollectionEnabled(enabled) {\n      return _setAnalyticsCollectionEnabled(analyticsId, enabled);\n    }\n  };\n  return analyticsInstance;\n}\nvar name = \"@firebase/analytics\";\nvar version = \"0.3.9\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Type constant for Firebase Analytics.\r\n */\nvar ANALYTICS_TYPE = 'analytics';\nfunction registerAnalytics(instance) {\n  instance.INTERNAL.registerComponent(new Component(ANALYTICS_TYPE, function (container) {\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    var installations = container.getProvider('installations').getImmediate();\n    return factory(app, installations);\n  }, \"PUBLIC\" /* PUBLIC */).setServiceProps({\n    settings: settings,\n    EventName: EventName\n  }));\n  instance.INTERNAL.registerComponent(new Component('analytics-internal', internalFactory, \"PRIVATE\" /* PRIVATE */));\n  instance.registerVersion(name, version);\n  function internalFactory(container) {\n    try {\n      var analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: analytics.logEvent\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(\"interop-component-reg-failed\" /* INTEROP_COMPONENT_REG_FAILED */, {\n        reason: e\n      });\n    }\n  }\n}\nregisterAnalytics(firebase);\nexport { factory, getGlobalVars, registerAnalytics, resetGlobalVars, settings };","map":{"version":3,"names":["ANALYTICS_ID_FIELD","GA_FID_KEY","ORIGIN_KEY","GTAG_URL","GtagCommand","EventName","logEvent","gtagFunction","analyticsId","eventName","eventParams","options","params","global","__assign","EVENT","setCurrentScreen","screenName","SET","CONFIG","update","setUserId","id","setUserProperties","properties","flatProperties","_i","_a","Object","keys","length","key","setAnalyticsCollectionEnabled","enabled","window","logger","Logger","initializeGAId","app","installations","gtagCore","getId","fid","_b","sent","Date","insertScriptTag","dataLayerName","script","document","createElement","src","async","head","appendChild","getOrCreateDataLayer","dataLayer","Array","isArray","wrapGtag","initializedIdPromisesMap","command","idOrNameOrParams","gtagParams","initializationPromisesToWaitFor","gaSendToList","gaSendToList_1","sendToId","initializationPromise","push","values","idPromise","Promise","all","then","catch","e","error","initializationPromiseToWait","resolve","wrapOrCreateGtag","gtagFunctionName","_args","arguments","wrappedGtag","findGtagScriptOnPage","scriptTags","getElementsByTagName","tag","includes","ERRORS","ERROR_FACTORY","ErrorFactory","gtagName","gtagCoreFunction","wrappedGtagFunction","globalInitDone","resetGlobalVars","newGlobalInitDone","newGaInitializedPromise","getGlobalVars","settings","create","factory","analyticsInstance","ANALYTICS_TYPE","registerAnalytics","instance","INTERNAL","registerComponent","Component","container","getProvider","getImmediate","setServiceProps","internalFactory","registerVersion","name","version","analytics","reason","firebase"],"sources":["../src/constants.ts","../src/functions.ts","../src/logger.ts","../src/helpers.ts","../src/errors.ts","../src/factory.ts","../index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const ANALYTICS_ID_FIELD = 'measurementId';\n\n// Key to attach FID to in gtag params.\nexport const GA_FID_KEY = 'firebase_id';\nexport const ORIGIN_KEY = 'origin';\n\nexport const GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\nexport enum GtagCommand {\n  EVENT = 'event',\n  SET = 'set',\n  CONFIG = 'config'\n}\n\n/*\n * Officially recommended event names for gtag.js\n * Any other string is also allowed.\n */\nexport enum EventName {\n  ADD_SHIPPING_INFO = 'add_shipping_info',\n  ADD_PAYMENT_INFO = 'add_payment_info',\n  ADD_TO_CART = 'add_to_cart',\n  ADD_TO_WISHLIST = 'add_to_wishlist',\n  BEGIN_CHECKOUT = 'begin_checkout',\n  /** @deprecated */\n  CHECKOUT_PROGRESS = 'checkout_progress',\n  EXCEPTION = 'exception',\n  GENERATE_LEAD = 'generate_lead',\n  LOGIN = 'login',\n  PAGE_VIEW = 'page_view',\n  PURCHASE = 'purchase',\n  REFUND = 'refund',\n  REMOVE_FROM_CART = 'remove_from_cart',\n  SCREEN_VIEW = 'screen_view',\n  SEARCH = 'search',\n  SELECT_CONTENT = 'select_content',\n  SELECT_ITEM = 'select_item',\n  SELECT_PROMOTION = 'select_promotion',\n  /** @deprecated */\n  SET_CHECKOUT_OPTION = 'set_checkout_option',\n  SHARE = 'share',\n  SIGN_UP = 'sign_up',\n  TIMING_COMPLETE = 'timing_complete',\n  VIEW_CART = 'view_cart',\n  VIEW_ITEM = 'view_item',\n  VIEW_ITEM_LIST = 'view_item_list',\n  VIEW_PROMOTION = 'view_promotion',\n  VIEW_SEARCH_RESULTS = 'view_search_results'\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsCallOptions,\n  Gtag,\n  CustomParams,\n  ControlParams,\n  EventParams\n} from '@firebase/analytics-types';\nimport { GtagCommand } from './constants';\n/**\n * Logs an analytics event through the Firebase SDK.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\n * @param eventParams Analytics event parameters.\n */\nexport function logEvent(\n  gtagFunction: Gtag,\n  analyticsId: string,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): void {\n  let params: EventParams | ControlParams = eventParams || {};\n  if (!options || !options.global) {\n    params = { ...eventParams, 'send_to': analyticsId };\n  }\n  // Workaround for http://b/141370449 - third argument cannot be undefined.\n  gtagFunction(GtagCommand.EVENT, eventName, params || {});\n}\n\n// TODO: Brad is going to add `screen_name` to GA Gold config parameter schema\n\n/**\n * Set screen_name parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param screenName Screen name string to set.\n */\nexport function setCurrentScreen(\n  gtagFunction: Gtag,\n  analyticsId: string,\n  screenName: string | null,\n  options?: AnalyticsCallOptions\n): void {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\n  } else {\n    gtagFunction(GtagCommand.CONFIG, analyticsId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n\n/**\n * Set user_id parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param id User ID string to set\n */\nexport function setUserId(\n  gtagFunction: Gtag,\n  analyticsId: string,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): void {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'user_id': id });\n  } else {\n    gtagFunction(GtagCommand.CONFIG, analyticsId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n\n/**\n * Set all other user properties other than user_id and screen_name.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param properties Map of user properties to set\n */\nexport function setUserProperties(\n  gtagFunction: Gtag,\n  analyticsId: string,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): void {\n  if (options && options.global) {\n    const flatProperties: { [key: string]: unknown } = {};\n    for (const key of Object.keys(properties)) {\n      // use dot notation for merge behavior in gtag.js\n      flatProperties[`user_properties.${key}`] = properties[key];\n    }\n    gtagFunction(GtagCommand.SET, flatProperties);\n  } else {\n    gtagFunction(GtagCommand.CONFIG, analyticsId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n\n/**\n * Set whether collection is enabled for this ID.\n *\n * @param enabled If true, collection is enabled for this ID.\n */\nexport function setAnalyticsCollectionEnabled(\n  analyticsId: string,\n  enabled: boolean\n): void {\n  window[`ga-disable-${analyticsId}`] = !enabled;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/analytics');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  DataLayer,\n  Gtag,\n  CustomParams,\n  ControlParams,\n  EventParams\n} from '@firebase/analytics-types';\nimport {\n  GtagCommand,\n  ANALYTICS_ID_FIELD,\n  GA_FID_KEY,\n  ORIGIN_KEY,\n  GTAG_URL\n} from './constants';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { logger } from './logger';\n\n/**\n * Initialize the analytics instance in gtag.js by calling config command with fid.\n *\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\n * part of the `page_view` event that's sent during the initialization\n * @param app Firebase app\n * @param gtagCore The gtag function that's not wrapped.\n */\nexport async function initializeGAId(\n  app: FirebaseApp,\n  installations: FirebaseInstallations,\n  gtagCore: Gtag\n): Promise<void> {\n  const fid = await installations.getId();\n\n  // This command initializes gtag.js and only needs to be called once for the entire web app,\n  // but since it is idempotent, we can call it multiple times.\n  // We keep it together with other initialization logic for better code structure.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  gtagCore('js' as any, new Date());\n\n  // It should be the first config command called on this GA-ID\n  // Initialize this GA-ID and set FID on it using the gtag config API.\n  gtagCore(GtagCommand.CONFIG, app.options[ANALYTICS_ID_FIELD]!, {\n    [GA_FID_KEY]: fid,\n    // guard against developers accidentally setting properties with prefix `firebase_`\n    [ORIGIN_KEY]: 'firebase',\n    update: true\n  });\n}\n\nexport function insertScriptTag(dataLayerName: string): void {\n  const script = document.createElement('script');\n  // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n  script.src = `${GTAG_URL}?l=${dataLayerName}`;\n  script.async = true;\n  document.head.appendChild(script);\n}\n\n/** Get reference to, or create, global datalayer.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\")\n */\nexport function getOrCreateDataLayer(dataLayerName: string): DataLayer {\n  // Check for existing dataLayer and create if needed.\n  let dataLayer: DataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName] as DataLayer;\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n/**\n * Wraps a standard gtag function with extra code to wait for completion of\n * relevant initialization promises before sending requests.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer\n * @param initializedIdPromisesMap Map of gaIds to their initialization promises\n */\nfunction wrapGtag(\n  gtagCore: Gtag,\n  initializedIdPromisesMap: { [gaId: string]: Promise<void> }\n): Function {\n  return (\n    command: 'config' | 'set' | 'event',\n    idOrNameOrParams: string | ControlParams,\n    gtagParams?: ControlParams & EventParams & CustomParams\n  ) => {\n    // If event, check that relevant initialization promises have completed.\n    if (command === GtagCommand.EVENT) {\n      let initializationPromisesToWaitFor: Array<Promise<void>> = [];\n      // If there's a 'send_to' param, check if any ID specified matches\n      // a FID we have begun a fetch on.\n      if (gtagParams && gtagParams['send_to']) {\n        let gaSendToList: string | string[] = gtagParams['send_to'];\n        // Make it an array if is isn't, so it can be dealt with the same way.\n        if (!Array.isArray(gaSendToList)) {\n          gaSendToList = [gaSendToList];\n        }\n        for (const sendToId of gaSendToList) {\n          const initializationPromise = initializedIdPromisesMap[sendToId];\n          // Groups will not be in the map.\n          if (initializationPromise) {\n            initializationPromisesToWaitFor.push(initializationPromise);\n          } else {\n            // There is an item in 'send_to' that is not associated\n            // directly with an FID, possibly a group.  Empty this array\n            // and let it get populated below.\n            initializationPromisesToWaitFor = [];\n            break;\n          }\n        }\n      }\n\n      // This will be unpopulated if there was no 'send_to' field , or\n      // if not all entries in the 'send_to' field could be mapped to\n      // a FID. In these cases, wait on all pending initialization promises.\n      if (initializationPromisesToWaitFor.length === 0) {\n        for (const idPromise of Object.values(initializedIdPromisesMap)) {\n          initializationPromisesToWaitFor.push(idPromise);\n        }\n      }\n      // Run core gtag function with args after all relevant initialization\n      // promises have been resolved.\n      Promise.all(initializationPromisesToWaitFor)\n        // Workaround for http://b/141370449 - third argument cannot be undefined.\n        .then(() =>\n          gtagCore(\n            GtagCommand.EVENT,\n            idOrNameOrParams as string,\n            gtagParams || {}\n          )\n        )\n        .catch(e => logger.error(e));\n    } else if (command === GtagCommand.CONFIG) {\n      const initializationPromiseToWait =\n        initializedIdPromisesMap[idOrNameOrParams as string] ||\n        Promise.resolve();\n      initializationPromiseToWait\n        .then(() => {\n          gtagCore(GtagCommand.CONFIG, idOrNameOrParams as string, gtagParams);\n        })\n        .catch(e => logger.error(e));\n    } else {\n      // SET command.\n      // Splitting calls for CONFIG and SET to make it clear which signature\n      // Typescript is checking.\n      gtagCore(GtagCommand.SET, idOrNameOrParams as CustomParams);\n    }\n  };\n}\n\n/**\n * Creates global gtag function or wraps existing one if found.\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\n * 'event' calls that belong to the GAID associated with this Firebase instance.\n *\n * @param initializedIdPromisesMap Map of gaId to initialization promises.\n * @param dataLayerName Name of global GA datalayer array.\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified)\n */\nexport function wrapOrCreateGtag(\n  initializedIdPromisesMap: { [gaId: string]: Promise<void> },\n  dataLayerName: string,\n  gtagFunctionName: string\n): {\n  gtagCore: Gtag;\n  wrappedGtag: Gtag;\n} {\n  // Create a basic core gtag function\n  let gtagCore: Gtag = function(..._args: unknown[]) {\n    // Must push IArguments object, not an array.\n    (window[dataLayerName] as DataLayer).push(arguments);\n  };\n\n  // Replace it with existing one if found\n  if (\n    window[gtagFunctionName] &&\n    typeof window[gtagFunctionName] === 'function'\n  ) {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(gtagCore, initializedIdPromisesMap);\n\n  return {\n    gtagCore,\n    wrappedGtag: window[gtagFunctionName] as Gtag\n  };\n}\n\n/**\n * Returns first script tag in DOM matching our gtag url pattern.\n */\nexport function findGtagScriptOnPage(): HTMLScriptElement | null {\n  const scriptTags = window.document.getElementsByTagName('script');\n  for (const tag of Object.values(scriptTags)) {\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\nimport { ANALYTICS_ID_FIELD } from './constants';\n\nexport const enum AnalyticsError {\n  NO_GA_ID = 'no-ga-id',\n  ALREADY_EXISTS = 'already-exists',\n  ALREADY_INITIALIZED = 'already-initialized',\n  INTEROP_COMPONENT_REG_FAILED = 'interop-component-reg-failed'\n}\n\nconst ERRORS: ErrorMap<AnalyticsError> = {\n  [AnalyticsError.NO_GA_ID]:\n    `\"${ANALYTICS_ID_FIELD}\" field is empty in ` +\n    'Firebase config. Firebase Analytics ' +\n    'requires this field to contain a valid measurement ID.',\n  [AnalyticsError.ALREADY_EXISTS]:\n    'A Firebase Analytics instance with the measurement ID ${id} ' +\n    ' already exists. ' +\n    'Only one Firebase Analytics instance can be created for each measurement ID.',\n  [AnalyticsError.ALREADY_INITIALIZED]:\n    'Firebase Analytics has already been initialized.' +\n    'settings() must be called before initializing any Analytics instance' +\n    'or it will have no effect.',\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]:\n    'Firebase Analytics Interop Component failed to instantiate'\n};\n\ninterface ErrorParams {\n  [AnalyticsError.ALREADY_EXISTS]: { id: string };\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]: { reason: Error };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AnalyticsError, ErrorParams>(\n  'analytics',\n  'Analytics',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseAnalytics,\n  Gtag,\n  SettingsOptions\n} from '@firebase/analytics-types';\nimport {\n  logEvent,\n  setCurrentScreen,\n  setUserId,\n  setUserProperties,\n  setAnalyticsCollectionEnabled\n} from './functions';\nimport {\n  initializeGAId,\n  insertScriptTag,\n  getOrCreateDataLayer,\n  wrapOrCreateGtag,\n  findGtagScriptOnPage\n} from './helpers';\nimport { ANALYTICS_ID_FIELD } from './constants';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInstallations } from '@firebase/installations-types';\n\n/**\n * Maps gaId to FID fetch promises.\n */\nlet initializedIdPromisesMap: { [gaId: string]: Promise<void> } = {};\n\n/**\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\n */\nlet dataLayerName: string = 'dataLayer';\n\n/**\n * Name for window global gtag function used by GA: defaults to 'gtag'.\n */\nlet gtagName: string = 'gtag';\n\n/**\n * Reproduction of standard gtag function or reference to existing\n * gtag function on window object.\n */\nlet gtagCoreFunction: Gtag;\n\n/**\n * Wrapper around gtag function that ensures FID is sent with all\n * relevant event and config calls.\n */\nlet wrappedGtagFunction: Gtag;\n\n/**\n * Flag to ensure page initialization steps (creation or wrapping of\n * dataLayer and gtag script) are only run once per page load.\n */\nlet globalInitDone: boolean = false;\n\n/**\n * For testing\n */\nexport function resetGlobalVars(\n  newGlobalInitDone = false,\n  newGaInitializedPromise = {}\n): void {\n  globalInitDone = newGlobalInitDone;\n  initializedIdPromisesMap = newGaInitializedPromise;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n\n/**\n * For testing\n */\nexport function getGlobalVars(): {\n  initializedIdPromisesMap: { [gaId: string]: Promise<void> };\n} {\n  return {\n    initializedIdPromisesMap\n  };\n}\n\n/**\n * This must be run before calling firebase.analytics() or it won't\n * have any effect.\n * @param options Custom gtag and dataLayer names.\n */\nexport function settings(options: SettingsOptions): void {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n  }\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n\nexport function factory(\n  app: FirebaseApp,\n  installations: FirebaseInstallations\n): FirebaseAnalytics {\n  const analyticsId = app.options[ANALYTICS_ID_FIELD];\n  if (!analyticsId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_GA_ID);\n  }\n\n  if (initializedIdPromisesMap[analyticsId] != null) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_EXISTS, {\n      id: analyticsId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n\n    // Detect if user has already put the gtag <script> tag on this page.\n    if (!findGtagScriptOnPage()) {\n      insertScriptTag(dataLayerName);\n    }\n    getOrCreateDataLayer(dataLayerName);\n\n    const { wrappedGtag, gtagCore } = wrapOrCreateGtag(\n      initializedIdPromisesMap,\n      dataLayerName,\n      gtagName\n    );\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  initializedIdPromisesMap[analyticsId] = initializeGAId(\n    app,\n    installations,\n    gtagCoreFunction\n  );\n\n  const analyticsInstance: FirebaseAnalytics = {\n    app,\n    logEvent: (eventName, eventParams, options) =>\n      logEvent(\n        wrappedGtagFunction,\n        analyticsId,\n        eventName,\n        eventParams,\n        options\n      ),\n    setCurrentScreen: (screenName, options) =>\n      setCurrentScreen(wrappedGtagFunction, analyticsId, screenName, options),\n    setUserId: (id, options) =>\n      setUserId(wrappedGtagFunction, analyticsId, id, options),\n    setUserProperties: (properties, options) =>\n      setUserProperties(wrappedGtagFunction, analyticsId, properties, options),\n    setAnalyticsCollectionEnabled: enabled =>\n      setAnalyticsCollectionEnabled(analyticsId, enabled)\n  };\n\n  return analyticsInstance;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { FirebaseAnalytics } from '@firebase/analytics-types';\nimport { FirebaseAnalyticsInternal } from '@firebase/analytics-interop-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport {\n  factory,\n  settings,\n  resetGlobalVars,\n  getGlobalVars\n} from './src/factory';\nimport { EventName } from './src/constants';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\nimport { ERROR_FACTORY, AnalyticsError } from './src/errors';\n\nimport { name, version } from './package.json';\n\ndeclare global {\n  interface Window {\n    [key: string]: unknown;\n  }\n}\n\n/**\n * Type constant for Firebase Analytics.\n */\nconst ANALYTICS_TYPE = 'analytics';\nexport function registerAnalytics(instance: _FirebaseNamespace): void {\n  instance.INTERNAL.registerComponent(\n    new Component(\n      ANALYTICS_TYPE,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const installations = container\n          .getProvider('installations')\n          .getImmediate();\n\n        return factory(app, installations);\n      },\n      ComponentType.PUBLIC\n    ).setServiceProps({\n      settings,\n      EventName\n    })\n  );\n\n  instance.INTERNAL.registerComponent(\n    new Component('analytics-internal', internalFactory, ComponentType.PRIVATE)\n  );\n\n  instance.registerVersion(name, version);\n\n  function internalFactory(\n    container: ComponentContainer\n  ): FirebaseAnalyticsInternal {\n    try {\n      const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: analytics.logEvent\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(AnalyticsError.INTEROP_COMPONENT_REG_FAILED, {\n        reason: e\n      });\n    }\n  }\n}\n\nexport { factory, settings, resetGlobalVars, getGlobalVars };\n\nregisterAnalytics(firebase as _FirebaseNamespace);\n\n/**\n * Define extension behavior of `registerAnalytics`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    analytics(app?: FirebaseApp): FirebaseAnalytics;\n  }\n  interface FirebaseApp {\n    analytics(): FirebaseAnalytics;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}