{"ast":null,"code":"import { __assign, __spreadArrays } from 'tslib';\nimport { Observable } from 'rxjs';\nimport { map, filter, scan, distinctUntilChanged } from 'rxjs/operators';\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction _fromRef(ref, options) {\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  return new Observable(function (subscriber) {\n    var unsubscribe = ref.onSnapshot(options || {}, subscriber);\n    return {\n      unsubscribe: unsubscribe\n    };\n  });\n}\nfunction fromRef(ref, options) {\n  return _fromRef(ref, options);\n}\nfunction fromDocRef(ref, options) {\n  return fromRef(ref, options);\n}\nfunction fromCollectionRef(ref, options) {\n  return fromRef(ref, options);\n}\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction doc(ref) {\n  return fromDocRef(ref);\n}\n/**\r\n * Returns a stream of a document, mapped to its data payload and optionally the document ID\r\n * @param query\r\n */\nfunction docData(ref, idField) {\n  return doc(ref).pipe(map(function (snap) {\n    return snapToData(snap, idField);\n  }));\n}\nfunction snapToData(snapshot, idField) {\n  var _a;\n  return __assign(__assign({}, snapshot.data()), idField ? (_a = {}, _a[idField] = snapshot.id, _a) : null);\n}\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ALL_EVENTS = ['added', 'modified', 'removed'];\n/**\r\n * Create an operator that determines if a the stream of document changes\r\n * are specified by the event filter. If the document change type is not\r\n * in specified events array, it will not be emitted.\r\n */\nvar filterEvents = function (events) {\n  return filter(function (changes) {\n    var hasChange = false;\n    for (var i = 0; i < changes.length; i++) {\n      var change = changes[i];\n      if (events && events.indexOf(change.type) >= 0) {\n        hasChange = true;\n        break;\n      }\n    }\n    return hasChange;\n  });\n};\n/**\r\n * Create an operator that filters out empty changes. We provide the\r\n * ability to filter on events, which means all changes can be filtered out.\r\n * This creates an empty array and would be incorrect to emit.\r\n */\nvar filterEmpty = filter(function (changes) {\n  return changes.length > 0;\n});\n/**\r\n * Splice arguments on top of a sliced array, to break top-level ===\r\n * this is useful for change-detection\r\n */\nfunction sliceAndSplice(original, start, deleteCount) {\n  var args = [];\n  for (var _i = 3; _i < arguments.length; _i++) {\n    args[_i - 3] = arguments[_i];\n  }\n  var returnArray = original.slice();\n  returnArray.splice.apply(returnArray, __spreadArrays([start, deleteCount], args));\n  return returnArray;\n}\n/**\r\n * Creates a new sorted array from a new change.\r\n * @param combined\r\n * @param change\r\n */\nfunction processIndividualChange(combined, change) {\n  switch (change.type) {\n    case 'added':\n      if (combined[change.newIndex] && combined[change.newIndex].doc.ref.isEqual(change.doc.ref)) ;else {\n        return sliceAndSplice(combined, change.newIndex, 0, change);\n      }\n      break;\n    case 'modified':\n      if (combined[change.oldIndex] == null || combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\n        // When an item changes position we first remove it\n        // and then add it's new position\n        if (change.oldIndex !== change.newIndex) {\n          var copiedArray = combined.slice();\n          copiedArray.splice(change.oldIndex, 1);\n          copiedArray.splice(change.newIndex, 0, change);\n          return copiedArray;\n        } else {\n          return sliceAndSplice(combined, change.newIndex, 1, change);\n        }\n      }\n      break;\n    case 'removed':\n      if (combined[change.oldIndex] && combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\n        return sliceAndSplice(combined, change.oldIndex, 1);\n      }\n      break;\n  }\n  return combined;\n}\n/**\r\n * Combines the total result set from the current set of changes from an incoming set\r\n * of changes.\r\n * @param current\r\n * @param changes\r\n * @param events\r\n */\nfunction processDocumentChanges(current, changes, events) {\n  if (events === void 0) {\n    events = ALL_EVENTS;\n  }\n  changes.forEach(function (change) {\n    // skip unwanted change types\n    if (events.indexOf(change.type) > -1) {\n      current = processIndividualChange(current, change);\n    }\n  });\n  return current;\n}\n/**\r\n * Return a stream of document changes on a query. These results are not in sort order but in\r\n * order of occurence.\r\n * @param query\r\n */\nfunction collectionChanges(query, events) {\n  if (events === void 0) {\n    events = ALL_EVENTS;\n  }\n  return fromCollectionRef(query).pipe(map(function (snapshot) {\n    return snapshot.docChanges();\n  }), filterEvents(events), filterEmpty);\n}\n/**\r\n * Return a stream of document snapshots on a query. These results are in sort order.\r\n * @param query\r\n */\nfunction collection(query) {\n  return fromCollectionRef(query).pipe(map(function (changes) {\n    return changes.docs;\n  }));\n}\n/**\r\n * Return a stream of document changes on a query. These results are in sort order.\r\n * @param query\r\n */\nfunction sortedChanges(query, events) {\n  return collectionChanges(query, events).pipe(scan(function (current, changes) {\n    return processDocumentChanges(current, changes, events);\n  }, []), distinctUntilChanged());\n}\n/**\r\n * Create a stream of changes as they occur it time. This method is similar\r\n * to docChanges() but it collects each event in an array over time.\r\n */\nfunction auditTrail(query, events) {\n  return collectionChanges(query, events).pipe(scan(function (current, action) {\n    return __spreadArrays(current, action);\n  }, []));\n}\n/**\r\n * Returns a stream of documents mapped to their data payload, and optionally the document ID\r\n * @param query\r\n */\nfunction collectionData(query, idField) {\n  return collection(query).pipe(map(function (arr) {\n    return arr.map(function (snap) {\n      return snapToData(snap, idField);\n    });\n  }));\n}\nexport { auditTrail, collection, collectionChanges, collectionData, doc, docData, fromCollectionRef, fromDocRef, fromRef, snapToData, sortedChanges };","map":{"version":3,"names":["_fromRef","ref","options","Observable","subscriber","unsubscribe","onSnapshot","fromRef","fromDocRef","fromCollectionRef","doc","docData","idField","pipe","map","snap","snapToData","snapshot","__assign","data","_a","id","ALL_EVENTS","filterEvents","events","filter","changes","hasChange","i","length","change","indexOf","type","filterEmpty","sliceAndSplice","original","start","deleteCount","args","_i","arguments","returnArray","slice","splice","apply","__spreadArrays","processIndividualChange","combined","newIndex","isEqual","oldIndex","copiedArray","processDocumentChanges","current","forEach","collectionChanges","query","docChanges","collection","docs","sortedChanges","scan","distinctUntilChanged","auditTrail","action","collectionData","arr"],"sources":["../fromRef.ts","../document/index.ts","../collection/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { firestore } from 'firebase/app';\nimport { Observable } from 'rxjs';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction _fromRef(\n  ref: any,\n  options: firestore.SnapshotListenOptions | undefined\n): Observable<any> {\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  return new Observable(subscriber => {\n    const unsubscribe = ref.onSnapshot(options || {}, subscriber);\n    return { unsubscribe };\n  });\n}\n\nexport function fromRef(\n  ref: firestore.DocumentReference | firestore.Query,\n  options?: firestore.SnapshotListenOptions\n): Observable<{}> {\n  return _fromRef(ref, options);\n}\n\nexport function fromDocRef(\n  ref: firestore.DocumentReference,\n  options?: firestore.SnapshotListenOptions\n): Observable<firestore.DocumentSnapshot> {\n  return fromRef(ref, options) as Observable<firestore.DocumentSnapshot>;\n}\n\nexport function fromCollectionRef(\n  ref: firestore.Query,\n  options?: firestore.SnapshotListenOptions\n): Observable<firestore.QuerySnapshot> {\n  return fromRef(ref, options) as Observable<firestore.QuerySnapshot>;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { firestore } from 'firebase/app';\nimport { fromDocRef } from '../fromRef';\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\nexport function doc(\n  ref: firestore.DocumentReference\n): Observable<firestore.DocumentSnapshot> {\n  return fromDocRef(ref);\n}\n\n/**\n * Returns a stream of a document, mapped to its data payload and optionally the document ID\n * @param query\n */\nexport function docData<T>(\n  ref: firestore.DocumentReference,\n  idField?: string\n): Observable<T> {\n  return doc(ref).pipe(map(snap => snapToData(snap, idField) as T));\n}\n\nexport function snapToData(\n  snapshot: firestore.DocumentSnapshot,\n  idField?: string\n): {} {\n  return {\n    ...snapshot.data(),\n    ...(idField ? { [idField]: snapshot.id } : null)\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { firestore } from 'firebase/app';\nimport { fromCollectionRef } from '../fromRef';\nimport { Observable, MonoTypeOperatorFunction } from 'rxjs';\nimport { map, filter, scan, distinctUntilChanged } from 'rxjs/operators';\nimport { snapToData } from '../document';\n\nconst ALL_EVENTS: firestore.DocumentChangeType[] = [\n  'added',\n  'modified',\n  'removed'\n];\n\n/**\n * Create an operator that determines if a the stream of document changes\n * are specified by the event filter. If the document change type is not\n * in specified events array, it will not be emitted.\n */\nconst filterEvents = (\n  events?: firestore.DocumentChangeType[]\n): MonoTypeOperatorFunction<firestore.DocumentChange[]> =>\n  filter((changes: firestore.DocumentChange[]) => {\n    let hasChange = false;\n    for (let i = 0; i < changes.length; i++) {\n      const change = changes[i];\n      if (events && events.indexOf(change.type) >= 0) {\n        hasChange = true;\n        break;\n      }\n    }\n    return hasChange;\n  });\n\n/**\n * Create an operator that filters out empty changes. We provide the\n * ability to filter on events, which means all changes can be filtered out.\n * This creates an empty array and would be incorrect to emit.\n */\nconst filterEmpty = filter(\n  (changes: firestore.DocumentChange[]) => changes.length > 0\n);\n\n/**\n * Splice arguments on top of a sliced array, to break top-level ===\n * this is useful for change-detection\n */\nfunction sliceAndSplice<T>(\n  original: T[],\n  start: number,\n  deleteCount: number,\n  ...args: T[]\n): T[] {\n  const returnArray = original.slice();\n  returnArray.splice(start, deleteCount, ...args);\n  return returnArray;\n}\n\n/**\n * Creates a new sorted array from a new change.\n * @param combined\n * @param change\n */\nfunction processIndividualChange(\n  combined: firestore.DocumentChange[],\n  change: firestore.DocumentChange\n): firestore.DocumentChange[] {\n  switch (change.type) {\n    case 'added':\n      if (\n        combined[change.newIndex] &&\n        combined[change.newIndex].doc.ref.isEqual(change.doc.ref)\n      ) {\n        // Skip duplicate emissions. This is rare.\n        // TODO: Investigate possible bug in SDK.\n      } else {\n        return sliceAndSplice(combined, change.newIndex, 0, change);\n      }\n      break;\n    case 'modified':\n      if (\n        combined[change.oldIndex] == null ||\n        combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)\n      ) {\n        // When an item changes position we first remove it\n        // and then add it's new position\n        if (change.oldIndex !== change.newIndex) {\n          const copiedArray = combined.slice();\n          copiedArray.splice(change.oldIndex, 1);\n          copiedArray.splice(change.newIndex, 0, change);\n          return copiedArray;\n        } else {\n          return sliceAndSplice(combined, change.newIndex, 1, change);\n        }\n      }\n      break;\n    case 'removed':\n      if (\n        combined[change.oldIndex] &&\n        combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)\n      ) {\n        return sliceAndSplice(combined, change.oldIndex, 1);\n      }\n      break;\n    default: // ignore\n  }\n  return combined;\n}\n\n/**\n * Combines the total result set from the current set of changes from an incoming set\n * of changes.\n * @param current\n * @param changes\n * @param events\n */\nfunction processDocumentChanges(\n  current: firestore.DocumentChange[],\n  changes: firestore.DocumentChange[],\n  events: firestore.DocumentChangeType[] = ALL_EVENTS\n): firestore.DocumentChange[] {\n  changes.forEach(change => {\n    // skip unwanted change types\n    if (events.indexOf(change.type) > -1) {\n      current = processIndividualChange(current, change);\n    }\n  });\n  return current;\n}\n\n/**\n * Return a stream of document changes on a query. These results are not in sort order but in\n * order of occurence.\n * @param query\n */\nexport function collectionChanges(\n  query: firestore.Query,\n  events: firestore.DocumentChangeType[] = ALL_EVENTS\n): Observable<firestore.DocumentChange[]> {\n  return fromCollectionRef(query).pipe(\n    map(snapshot => snapshot.docChanges()),\n    filterEvents(events),\n    filterEmpty\n  );\n}\n\n/**\n * Return a stream of document snapshots on a query. These results are in sort order.\n * @param query\n */\nexport function collection(\n  query: firestore.Query\n): Observable<firestore.QueryDocumentSnapshot[]> {\n  return fromCollectionRef(query).pipe(map(changes => changes.docs));\n}\n\n/**\n * Return a stream of document changes on a query. These results are in sort order.\n * @param query\n */\nexport function sortedChanges(\n  query: firestore.Query,\n  events?: firestore.DocumentChangeType[]\n): Observable<firestore.DocumentChange[]> {\n  return collectionChanges(query, events).pipe(\n    scan(\n      (\n        current: firestore.DocumentChange[],\n        changes: firestore.DocumentChange[]\n      ) => processDocumentChanges(current, changes, events),\n      []\n    ),\n    distinctUntilChanged()\n  );\n}\n\n/**\n * Create a stream of changes as they occur it time. This method is similar\n * to docChanges() but it collects each event in an array over time.\n */\nexport function auditTrail(\n  query: firestore.Query,\n  events?: firestore.DocumentChangeType[]\n): Observable<firestore.DocumentChange[]> {\n  return collectionChanges(query, events).pipe(\n    scan(\n      (current, action) => [...current, ...action],\n      [] as firestore.DocumentChange[]\n    )\n  );\n}\n\n/**\n * Returns a stream of documents mapped to their data payload, and optionally the document ID\n * @param query\n */\nexport function collectionData<T>(\n  query: firestore.Query,\n  idField?: string\n): Observable<T[]> {\n  return collection(query).pipe(\n    map(arr => {\n      return arr.map(snap => snapToData(snap, idField) as T);\n    })\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}