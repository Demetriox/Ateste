{"ast":null,"code":"'use strict';\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\nvar firebase = _interopDefault(require('@firebase/app'));\nvar tslib = require('tslib');\nvar component = require('@firebase/component');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Standard error codes for different ways a request can fail, as defined by:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * This map is used primarily to convert from a backend error code string to\r\n * a client SDK error code string, and make sure it's in the supported set.\r\n */\nvar errorCodeMap = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n/**\r\n * An explicit error that can be thrown from a handler to send an error to the\r\n * client that called the function.\r\n */\nvar HttpsErrorImpl = /** @class */function (_super) {\n  tslib.__extends(HttpsErrorImpl, _super);\n  function HttpsErrorImpl(code, message, details) {\n    var _this = _super.call(this, message) || this;\n    // This is a workaround for a bug in TypeScript when extending Error:\n    // tslint:disable-next-line\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(_this, HttpsErrorImpl.prototype);\n    _this.code = code;\n    _this.details = details;\n    return _this;\n  }\n  return HttpsErrorImpl;\n}(Error);\n/**\r\n * Takes an HTTP status code and returns the corresponding ErrorCode.\r\n * This is the standard HTTP status code -> error mapping defined in:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * @param status An HTTP status code.\r\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\r\n */\nfunction codeForHTTPStatus(status) {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n    case 400:\n      return 'invalid-argument';\n    case 401:\n      return 'unauthenticated';\n    case 403:\n      return 'permission-denied';\n    case 404:\n      return 'not-found';\n    case 409:\n      return 'aborted';\n    case 429:\n      return 'resource-exhausted';\n    case 499:\n      return 'cancelled';\n    case 500:\n      return 'internal';\n    case 501:\n      return 'unimplemented';\n    case 503:\n      return 'unavailable';\n    case 504:\n      return 'deadline-exceeded';\n  }\n  return 'unknown';\n}\n/**\r\n * Takes an HTTP response and returns the corresponding Error, if any.\r\n */\nfunction _errorForResponse(status, bodyJSON, serializer) {\n  var code = codeForHTTPStatus(status);\n  // Start with reasonable defaults from the status code.\n  var description = code;\n  var details = undefined;\n  // Then look through the body for explicit details.\n  try {\n    var errorJSON = bodyJSON && bodyJSON.error;\n    if (errorJSON) {\n      var status_1 = errorJSON.status;\n      if (typeof status_1 === 'string') {\n        if (!errorCodeMap[status_1]) {\n          // They must've included an unknown error code in the body.\n          return new HttpsErrorImpl('internal', 'internal');\n        }\n        code = errorCodeMap[status_1];\n        // TODO(klimt): Add better default descriptions for error enums.\n        // The default description needs to be updated for the new code.\n        description = status_1;\n      }\n      var message = errorJSON.message;\n      if (typeof message === 'string') {\n        description = message;\n      }\n      details = errorJSON.details;\n      if (details !== undefined) {\n        details = serializer.decode(details);\n      }\n    }\n  } catch (e) {\n    // If we couldn't parse explicit error data, that's fine.\n  }\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n  return new HttpsErrorImpl(code, description, details);\n}\n\n/**\r\n * Helper class to get metadata that should be included with a function call.\r\n */\nvar ContextProvider = /** @class */function () {\n  function ContextProvider(authProvider, messagingProvider) {\n    var _this = this;\n    this.auth = null;\n    this.messaging = null;\n    this.auth = authProvider.getImmediate({\n      optional: true\n    });\n    this.messaging = messagingProvider.getImmediate({\n      optional: true\n    });\n    if (!this.auth) {\n      authProvider.get().then(function (auth) {\n        return _this.auth = auth;\n      }, function () {\n        /* get() never rejects */\n      });\n    }\n    if (!this.messaging) {\n      messagingProvider.get().then(function (messaging) {\n        return _this.messaging = messaging;\n      }, function () {\n        /* get() never rejects */\n      });\n    }\n  }\n  ContextProvider.prototype.getAuthToken = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var token, e_1;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.auth) {\n              return [2 /*return*/, undefined];\n            }\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.auth.getToken()];\n          case 2:\n            token = _a.sent();\n            if (!token) {\n              return [2 /*return*/, undefined];\n            }\n            return [2 /*return*/, token.accessToken];\n          case 3:\n            e_1 = _a.sent();\n            // If there's any error when trying to get the auth token, leave it off.\n            return [2 /*return*/, undefined];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  ContextProvider.prototype.getInstanceIdToken = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_a) {\n        if (!this.messaging || !('Notification' in self) || Notification.permission !== 'granted') {\n          return [2 /*return*/, undefined];\n        }\n        try {\n          return [2 /*return*/, this.messaging.getToken()];\n        } catch (e) {\n          // We don't warn on this, because it usually means messaging isn't set up.\n          // console.warn('Failed to retrieve instance id token.', e);\n          // If there's any error when trying to get the token, leave it off.\n          return [2 /*return*/, undefined];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  ContextProvider.prototype.getContext = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var authToken, instanceIdToken;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getAuthToken()];\n          case 1:\n            authToken = _a.sent();\n            return [4 /*yield*/, this.getInstanceIdToken()];\n          case 2:\n            instanceIdToken = _a.sent();\n            return [2 /*return*/, {\n              authToken: authToken,\n              instanceIdToken: instanceIdToken\n            }];\n        }\n      });\n    });\n  };\n  return ContextProvider;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nvar UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\nfunction mapValues(\n// { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\no, f) {\n  var result = {};\n  for (var key in o) {\n    if (o.hasOwnProperty(key)) {\n      result[key] = f(o[key]);\n    }\n  }\n  return result;\n}\nvar Serializer = /** @class */function () {\n  function Serializer() {}\n  // Takes data and encodes it in a JSON-friendly way, such that types such as\n  // Date are preserved.\n  Serializer.prototype.encode = function (data) {\n    var _this = this;\n    if (data == null) {\n      return null;\n    }\n    if (data instanceof Number) {\n      data = data.valueOf();\n    }\n    if (typeof data === 'number' && isFinite(data)) {\n      // Any number in JS is safe to put directly in JSON and parse as a double\n      // without any loss of precision.\n      return data;\n    }\n    if (data === true || data === false) {\n      return data;\n    }\n    if (Object.prototype.toString.call(data) === '[object String]') {\n      return data;\n    }\n    if (Array.isArray(data)) {\n      return data.map(function (x) {\n        return _this.encode(x);\n      });\n    }\n    if (typeof data === 'function' || typeof data === 'object') {\n      return mapValues(data, function (x) {\n        return _this.encode(x);\n      });\n    }\n    // If we got this far, the data is not encodable.\n    throw new Error('Data cannot be encoded in JSON: ' + data);\n  };\n  // Takes data that's been encoded in a JSON-friendly form and returns a form\n  // with richer datatypes, such as Dates, etc.\n  Serializer.prototype.decode = function (json) {\n    var _this = this;\n    if (json == null) {\n      return json;\n    }\n    if (json['@type']) {\n      switch (json['@type']) {\n        case LONG_TYPE:\n        // Fall through and handle this the same as unsigned.\n        case UNSIGNED_LONG_TYPE:\n          {\n            // Technically, this could work return a valid number for malformed\n            // data if there was a number followed by garbage. But it's just not\n            // worth all the extra code to detect that case.\n            var value = Number(json['value']);\n            if (isNaN(value)) {\n              throw new Error('Data cannot be decoded from JSON: ' + json);\n            }\n            return value;\n          }\n        default:\n          {\n            throw new Error('Data cannot be decoded from JSON: ' + json);\n          }\n      }\n    }\n    if (Array.isArray(json)) {\n      return json.map(function (x) {\n        return _this.decode(x);\n      });\n    }\n    if (typeof json === 'function' || typeof json === 'object') {\n      return mapValues(json, function (x) {\n        return _this.decode(x);\n      });\n    }\n    // Anything else is safe to return.\n    return json;\n  };\n  return Serializer;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns a Promise that will be rejected after the given duration.\r\n * The error will be of type HttpsErrorImpl.\r\n *\r\n * @param millis Number of milliseconds to wait before rejecting.\r\n */\nfunction failAfter(millis) {\n  var timer;\n  var promise = new Promise(function (_, reject) {\n    timer = setTimeout(function () {\n      reject(new HttpsErrorImpl('deadline-exceeded', 'deadline-exceeded'));\n    }, millis);\n  });\n  return {\n    timer: timer,\n    promise: promise\n  };\n}\n/**\r\n * The main class for the Firebase Functions SDK.\r\n */\nvar Service = /** @class */function () {\n  /**\r\n   * Creates a new Functions service for the given app and (optional) region.\r\n   * @param app_ The FirebaseApp to use.\r\n   * @param region_ The region to call functions in.\r\n   */\n  function Service(app_, authProvider, messagingProvider, region_) {\n    var _this = this;\n    if (region_ === void 0) {\n      region_ = 'us-central1';\n    }\n    this.app_ = app_;\n    this.region_ = region_;\n    this.serializer = new Serializer();\n    this.emulatorOrigin = null;\n    this.INTERNAL = {\n      delete: function () {\n        return _this.deleteService();\n      }\n    };\n    this.contextProvider = new ContextProvider(authProvider, messagingProvider);\n    // Cancels all ongoing requests when resolved.\n    this.cancelAllRequests = new Promise(function (resolve) {\n      _this.deleteService = function () {\n        return resolve();\n      };\n    });\n  }\n  Object.defineProperty(Service.prototype, \"app\", {\n    get: function () {\n      return this.app_;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns the URL for a callable with the given name.\r\n   * @param name The name of the callable.\r\n   */\n  Service.prototype._url = function (name) {\n    var projectId = this.app_.options.projectId;\n    var region = this.region_;\n    if (this.emulatorOrigin !== null) {\n      var origin_1 = this.emulatorOrigin;\n      return origin_1 + \"/\" + projectId + \"/\" + region + \"/\" + name;\n    }\n    return \"https://\" + region + \"-\" + projectId + \".cloudfunctions.net/\" + name;\n  };\n  /**\r\n   * Changes this instance to point to a Cloud Functions emulator running\r\n   * locally. See https://firebase.google.com/docs/functions/local-emulator\r\n   *\r\n   * @param origin The origin of the local emulator, such as\r\n   * \"http://localhost:5005\".\r\n   */\n  Service.prototype.useFunctionsEmulator = function (origin) {\n    this.emulatorOrigin = origin;\n  };\n  /**\r\n   * Returns a reference to the callable https trigger with the given name.\r\n   * @param name The name of the trigger.\r\n   */\n  Service.prototype.httpsCallable = function (name, options) {\n    var _this = this;\n    return function (data) {\n      return _this.call(name, data, options || {});\n    };\n  };\n  /**\r\n   * Does an HTTP POST and returns the completed response.\r\n   * @param url The url to post to.\r\n   * @param body The JSON body of the post.\r\n   * @param headers The HTTP headers to include in the request.\r\n   * @return A Promise that will succeed when the request finishes.\r\n   */\n  Service.prototype.postJSON = function (url, body, headers) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var response, e_1, json, e_2;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            headers.append('Content-Type', 'application/json');\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, fetch(url, {\n              method: 'POST',\n              body: JSON.stringify(body),\n              headers: headers\n            })];\n          case 2:\n            response = _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            e_1 = _a.sent();\n            // This could be an unhandled error on the backend, or it could be a\n            // network error. There's no way to know, since an unhandled error on the\n            // backend will fail to set the proper CORS header, and thus will be\n            // treated as a network error by fetch.\n            return [2 /*return*/, {\n              status: 0,\n              json: null\n            }];\n          case 4:\n            json = null;\n            _a.label = 5;\n          case 5:\n            _a.trys.push([5, 7,, 8]);\n            return [4 /*yield*/, response.json()];\n          case 6:\n            json = _a.sent();\n            return [3 /*break*/, 8];\n          case 7:\n            e_2 = _a.sent();\n            return [3 /*break*/, 8];\n          case 8:\n            return [2 /*return*/, {\n              status: response.status,\n              json: json\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * Calls a callable function asynchronously and returns the result.\r\n   * @param name The name of the callable trigger.\r\n   * @param data The data to pass as params to the function.s\r\n   */\n  Service.prototype.call = function (name, data, options) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var url, body, headers, context, timeout, _a, timer, failAfterPromise, response, error, responseData, decodedData;\n      return tslib.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            url = this._url(name);\n            // Encode any special types, such as dates, in the input data.\n            data = this.serializer.encode(data);\n            body = {\n              data: data\n            };\n            headers = new Headers();\n            return [4 /*yield*/, this.contextProvider.getContext()];\n          case 1:\n            context = _b.sent();\n            if (context.authToken) {\n              headers.append('Authorization', 'Bearer ' + context.authToken);\n            }\n            if (context.instanceIdToken) {\n              headers.append('Firebase-Instance-ID-Token', context.instanceIdToken);\n            }\n            timeout = options.timeout || 70000;\n            _a = failAfter(timeout), timer = _a.timer, failAfterPromise = _a.promise;\n            return [4 /*yield*/, Promise.race([clearTimeoutWrapper(timer, this.postJSON(url, body, headers)), failAfterPromise, clearTimeoutWrapper(timer, this.cancelAllRequests)])];\n          case 2:\n            response = _b.sent();\n            // If service was deleted, interrupted response throws an error.\n            if (!response) {\n              throw new HttpsErrorImpl('cancelled', 'Firebase Functions instance was deleted.');\n            }\n            error = _errorForResponse(response.status, response.json, this.serializer);\n            if (error) {\n              throw error;\n            }\n            if (!response.json) {\n              throw new HttpsErrorImpl('internal', 'Response is not valid JSON object.');\n            }\n            responseData = response.json.data;\n            // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n            // backwards compatibility.\n            if (typeof responseData === 'undefined') {\n              responseData = response.json.result;\n            }\n            if (typeof responseData === 'undefined') {\n              // Consider the response malformed.\n              throw new HttpsErrorImpl('internal', 'Response is missing data field.');\n            }\n            decodedData = this.serializer.decode(responseData);\n            return [2 /*return*/, {\n              data: decodedData\n            }];\n        }\n      });\n    });\n  };\n  return Service;\n}();\nfunction clearTimeoutWrapper(timer, promise) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var result;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, promise];\n        case 1:\n          result = _a.sent();\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          clearTimeout(timer);\n          return [2 /*return*/, result];\n      }\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Type constant for Firebase Functions.\r\n */\nvar FUNCTIONS_TYPE = 'functions';\nfunction factory(container, region) {\n  // Dependencies\n  var app = container.getProvider('app').getImmediate();\n  var authProvider = container.getProvider('auth-internal');\n  var messagingProvider = container.getProvider('messaging');\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new Service(app, authProvider, messagingProvider, region);\n}\nfunction registerFunctions(instance) {\n  var namespaceExports = {\n    // no-inline\n    Functions: Service\n  };\n  instance.INTERNAL.registerComponent(new component.Component(FUNCTIONS_TYPE, factory, \"PUBLIC\" /* PUBLIC */).setServiceProps(namespaceExports).setMultipleInstances(true));\n}\nvar name = \"@firebase/functions\";\nvar version = \"0.4.48\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nregisterFunctions(firebase);\nfirebase.registerVersion(name, version);","map":{"version":3,"names":["errorCodeMap","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","UNAUTHENTICATED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","INTERNAL","UNAVAILABLE","DATA_LOSS","HttpsErrorImpl","_super","tslib","__extends","code","message","details","_this","call","Object","setPrototypeOf","prototype","Error","codeForHTTPStatus","status","_errorForResponse","bodyJSON","serializer","description","undefined","errorJSON","error","status_1","decode","e","ContextProvider","authProvider","messagingProvider","auth","messaging","getImmediate","optional","get","then","getAuthToken","getToken","token","_a","sent","accessToken","getInstanceIdToken","self","Notification","permission","getContext","authToken","instanceIdToken","LONG_TYPE","UNSIGNED_LONG_TYPE","mapValues","o","f","result","key","hasOwnProperty","Serializer","encode","data","Number","valueOf","isFinite","toString","Array","isArray","map","x","json","value","isNaN","failAfter","millis","timer","promise","Promise","_","reject","setTimeout","Service","app_","region_","emulatorOrigin","delete","deleteService","contextProvider","cancelAllRequests","resolve","defineProperty","_url","name","projectId","options","region","origin_1","useFunctionsEmulator","origin","httpsCallable","postJSON","url","body","headers","append","fetch","method","JSON","stringify","response","Headers","context","_b","timeout","failAfterPromise","race","clearTimeoutWrapper","responseData","decodedData","clearTimeout","FUNCTIONS_TYPE","factory","container","app","getProvider","registerFunctions","instance","namespaceExports","Functions","registerComponent","component","Component","setServiceProps","setMultipleInstances","firebase","registerVersion","version"],"sources":["../src/api/error.ts","../src/context.ts","../src/serializer.ts","../src/api/service.ts","../src/config.ts","../index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HttpsError, FunctionsErrorCode } from '@firebase/functions-types';\nimport { Serializer } from '../serializer';\nimport { HttpResponseBody } from './service';\n\n/**\n * Standard error codes for different ways a request can fail, as defined by:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * This map is used primarily to convert from a backend error code string to\n * a client SDK error code string, and make sure it's in the supported set.\n */\nconst errorCodeMap: { [name: string]: FunctionsErrorCode } = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n\n/**\n * An explicit error that can be thrown from a handler to send an error to the\n * client that called the function.\n */\nexport class HttpsErrorImpl extends Error implements HttpsError {\n  /**\n   * A standard error code that will be returned to the client. This also\n   * determines the HTTP status code of the response, as defined in code.proto.\n   */\n  readonly code: FunctionsErrorCode;\n\n  /**\n   * Extra data to be converted to JSON and included in the error response.\n   */\n  readonly details?: unknown;\n\n  constructor(code: FunctionsErrorCode, message?: string, details?: unknown) {\n    super(message);\n\n    // This is a workaround for a bug in TypeScript when extending Error:\n    // tslint:disable-next-line\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, HttpsErrorImpl.prototype);\n\n    this.code = code;\n    this.details = details;\n  }\n}\n\n/**\n * Takes an HTTP status code and returns the corresponding ErrorCode.\n * This is the standard HTTP status code -> error mapping defined in:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * @param status An HTTP status code.\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\n */\nfunction codeForHTTPStatus(status: number): FunctionsErrorCode {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n    case 400:\n      return 'invalid-argument';\n    case 401:\n      return 'unauthenticated';\n    case 403:\n      return 'permission-denied';\n    case 404:\n      return 'not-found';\n    case 409:\n      return 'aborted';\n    case 429:\n      return 'resource-exhausted';\n    case 499:\n      return 'cancelled';\n    case 500:\n      return 'internal';\n    case 501:\n      return 'unimplemented';\n    case 503:\n      return 'unavailable';\n    case 504:\n      return 'deadline-exceeded';\n    default: // ignore\n  }\n  return 'unknown';\n}\n\n/**\n * Takes an HTTP response and returns the corresponding Error, if any.\n */\nexport function _errorForResponse(\n  status: number,\n  bodyJSON: HttpResponseBody | null,\n  serializer: Serializer\n): Error | null {\n  let code = codeForHTTPStatus(status);\n\n  // Start with reasonable defaults from the status code.\n  let description: string = code;\n\n  let details: unknown = undefined;\n\n  // Then look through the body for explicit details.\n  try {\n    const errorJSON = bodyJSON && bodyJSON.error;\n    if (errorJSON) {\n      const status = errorJSON.status;\n      if (typeof status === 'string') {\n        if (!errorCodeMap[status]) {\n          // They must've included an unknown error code in the body.\n          return new HttpsErrorImpl('internal', 'internal');\n        }\n        code = errorCodeMap[status];\n\n        // TODO(klimt): Add better default descriptions for error enums.\n        // The default description needs to be updated for the new code.\n        description = status;\n      }\n\n      const message = errorJSON.message;\n      if (typeof message === 'string') {\n        description = message;\n      }\n\n      details = errorJSON.details;\n      if (details !== undefined) {\n        details = serializer.decode(details as {} | null);\n      }\n    }\n  } catch (e) {\n    // If we couldn't parse explicit error data, that's fine.\n  }\n\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n\n  return new HttpsErrorImpl(code, description, details);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _FirebaseApp } from '@firebase/app-types/private';\nimport {\n  FirebaseMessaging,\n  FirebaseMessagingName\n} from '@firebase/messaging-types';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\n/**\n * The metadata that should be supplied with function calls.\n */\nexport interface Context {\n  authToken?: string;\n  instanceIdToken?: string;\n}\n\n/**\n * Helper class to get metadata that should be included with a function call.\n */\nexport class ContextProvider {\n  private auth: FirebaseAuthInternal | null = null;\n  private messaging: FirebaseMessaging | null = null;\n  constructor(\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<FirebaseMessagingName>\n  ) {\n    this.auth = authProvider.getImmediate({ optional: true });\n    this.messaging = messagingProvider.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth) {\n      authProvider.get().then(\n        auth => (this.auth = auth),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n\n    if (!this.messaging) {\n      messagingProvider.get().then(\n        messaging => (this.messaging = messaging),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n  }\n\n  async getAuthToken(): Promise<string | undefined> {\n    if (!this.auth) {\n      return undefined;\n    }\n\n    try {\n      const token = await this.auth.getToken();\n      if (!token) {\n        return undefined;\n      }\n      return token.accessToken;\n    } catch (e) {\n      // If there's any error when trying to get the auth token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getInstanceIdToken(): Promise<string | undefined> {\n    if (\n      !this.messaging ||\n      !('Notification' in self) ||\n      Notification.permission !== 'granted'\n    ) {\n      return undefined;\n    }\n\n    try {\n      return this.messaging.getToken();\n    } catch (e) {\n      // We don't warn on this, because it usually means messaging isn't set up.\n      // console.warn('Failed to retrieve instance id token.', e);\n\n      // If there's any error when trying to get the token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getContext(): Promise<Context> {\n    const authToken = await this.getAuthToken();\n    const instanceIdToken = await this.getInstanceIdToken();\n    return { authToken, instanceIdToken };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nconst UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\n\nfunction mapValues(\n  // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  o: { [key: string]: any },\n  f: (arg0: unknown) => unknown\n): object {\n  const result: { [key: string]: unknown } = {};\n  for (const key in o) {\n    if (o.hasOwnProperty(key)) {\n      result[key] = f(o[key]);\n    }\n  }\n  return result;\n}\n\nexport class Serializer {\n  // Takes data and encodes it in a JSON-friendly way, such that types such as\n  // Date are preserved.\n  encode(data: unknown): unknown {\n    if (data == null) {\n      return null;\n    }\n    if (data instanceof Number) {\n      data = data.valueOf();\n    }\n    if (typeof data === 'number' && isFinite(data)) {\n      // Any number in JS is safe to put directly in JSON and parse as a double\n      // without any loss of precision.\n      return data;\n    }\n    if (data === true || data === false) {\n      return data;\n    }\n    if (Object.prototype.toString.call(data) === '[object String]') {\n      return data;\n    }\n    if (Array.isArray(data)) {\n      return data.map(x => this.encode(x));\n    }\n    if (typeof data === 'function' || typeof data === 'object') {\n      return mapValues(data as object, x => this.encode(x));\n    }\n    // If we got this far, the data is not encodable.\n    throw new Error('Data cannot be encoded in JSON: ' + data);\n  }\n\n  // Takes data that's been encoded in a JSON-friendly form and returns a form\n  // with richer datatypes, such as Dates, etc.\n  decode(json: unknown): unknown {\n    if (json == null) {\n      return json;\n    }\n    if ((json as { [key: string]: unknown })['@type']) {\n      switch ((json as { [key: string]: unknown })['@type']) {\n        case LONG_TYPE:\n        // Fall through and handle this the same as unsigned.\n        case UNSIGNED_LONG_TYPE: {\n          // Technically, this could work return a valid number for malformed\n          // data if there was a number followed by garbage. But it's just not\n          // worth all the extra code to detect that case.\n          const value = Number((json as { [key: string]: unknown })['value']);\n          if (isNaN(value)) {\n            throw new Error('Data cannot be decoded from JSON: ' + json);\n          }\n          return value;\n        }\n        default: {\n          throw new Error('Data cannot be decoded from JSON: ' + json);\n        }\n      }\n    }\n    if (Array.isArray(json)) {\n      return json.map(x => this.decode(x));\n    }\n    if (typeof json === 'function' || typeof json === 'object') {\n      return mapValues(json as object, x => this.decode(x as {} | null));\n    }\n    // Anything else is safe to return.\n    return json;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport {\n  FirebaseFunctions,\n  HttpsCallable,\n  HttpsCallableResult,\n  HttpsCallableOptions\n} from '@firebase/functions-types';\nimport { _errorForResponse, HttpsErrorImpl } from './error';\nimport { ContextProvider } from '../context';\nimport { Serializer } from '../serializer';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { FirebaseMessagingName } from '@firebase/messaging-types';\n\n/**\n * The response to an http request.\n */\ninterface HttpResponse {\n  status: number;\n  json: HttpResponseBody | null;\n}\n/**\n * Describes the shape of the HttpResponse body.\n * It makes functions that would otherwise take {} able to access the\n * possible elements in the body more easily\n */\nexport interface HttpResponseBody {\n  data?: unknown;\n  result?: unknown;\n  error?: {\n    message?: unknown;\n    status?: unknown;\n    details?: unknown;\n  };\n}\n\n/**\n * Returns a Promise that will be rejected after the given duration.\n * The error will be of type HttpsErrorImpl.\n *\n * @param millis Number of milliseconds to wait before rejecting.\n */\nfunction failAfter(\n  millis: number\n): {\n  timer: number | NodeJS.Timeout;\n  promise: Promise<never>;\n} {\n  let timer!: number | NodeJS.Timeout;\n  const promise = new Promise<never>((_, reject) => {\n    timer = setTimeout(() => {\n      reject(new HttpsErrorImpl('deadline-exceeded', 'deadline-exceeded'));\n    }, millis);\n  });\n\n  return {\n    timer,\n    promise\n  };\n}\n\n/**\n * The main class for the Firebase Functions SDK.\n */\nexport class Service implements FirebaseFunctions, FirebaseService {\n  private readonly contextProvider: ContextProvider;\n  private readonly serializer = new Serializer();\n  private emulatorOrigin: string | null = null;\n  private cancelAllRequests: Promise<void>;\n  private deleteService!: Function;\n\n  /**\n   * Creates a new Functions service for the given app and (optional) region.\n   * @param app_ The FirebaseApp to use.\n   * @param region_ The region to call functions in.\n   */\n  constructor(\n    private app_: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<FirebaseMessagingName>,\n    private region_: string = 'us-central1'\n  ) {\n    this.contextProvider = new ContextProvider(authProvider, messagingProvider);\n    // Cancels all ongoing requests when resolved.\n    this.cancelAllRequests = new Promise(resolve => {\n      this.deleteService = () => {\n        return resolve();\n      };\n    });\n  }\n\n  get app(): FirebaseApp {\n    return this.app_;\n  }\n\n  INTERNAL = {\n    delete: (): Promise<void> => {\n      return this.deleteService();\n    }\n  };\n\n  /**\n   * Returns the URL for a callable with the given name.\n   * @param name The name of the callable.\n   */\n  _url(name: string): string {\n    const projectId = this.app_.options.projectId;\n    const region = this.region_;\n    if (this.emulatorOrigin !== null) {\n      const origin = this.emulatorOrigin;\n      return `${origin}/${projectId}/${region}/${name}`;\n    }\n    return `https://${region}-${projectId}.cloudfunctions.net/${name}`;\n  }\n\n  /**\n   * Changes this instance to point to a Cloud Functions emulator running\n   * locally. See https://firebase.google.com/docs/functions/local-emulator\n   *\n   * @param origin The origin of the local emulator, such as\n   * \"http://localhost:5005\".\n   */\n  useFunctionsEmulator(origin: string): void {\n    this.emulatorOrigin = origin;\n  }\n\n  /**\n   * Returns a reference to the callable https trigger with the given name.\n   * @param name The name of the trigger.\n   */\n  httpsCallable(name: string, options?: HttpsCallableOptions): HttpsCallable {\n    return data => {\n      return this.call(name, data, options || {});\n    };\n  }\n\n  /**\n   * Does an HTTP POST and returns the completed response.\n   * @param url The url to post to.\n   * @param body The JSON body of the post.\n   * @param headers The HTTP headers to include in the request.\n   * @return A Promise that will succeed when the request finishes.\n   */\n  private async postJSON(\n    url: string,\n    body: {},\n    headers: Headers\n  ): Promise<HttpResponse> {\n    headers.append('Content-Type', 'application/json');\n\n    let response: Response;\n    try {\n      response = await fetch(url, {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers\n      });\n    } catch (e) {\n      // This could be an unhandled error on the backend, or it could be a\n      // network error. There's no way to know, since an unhandled error on the\n      // backend will fail to set the proper CORS header, and thus will be\n      // treated as a network error by fetch.\n      return {\n        status: 0,\n        json: null\n      };\n    }\n    let json: {} | null = null;\n    try {\n      json = await response.json();\n    } catch (e) {\n      // If we fail to parse JSON, it will fail the same as an empty body.\n    }\n    return {\n      status: response.status,\n      json\n    };\n  }\n\n  /**\n   * Calls a callable function asynchronously and returns the result.\n   * @param name The name of the callable trigger.\n   * @param data The data to pass as params to the function.s\n   */\n  private async call(\n    name: string,\n    data: unknown,\n    options: HttpsCallableOptions\n  ): Promise<HttpsCallableResult> {\n    const url = this._url(name);\n\n    // Encode any special types, such as dates, in the input data.\n    data = this.serializer.encode(data);\n    const body = { data };\n\n    // Add a header for the authToken.\n    const headers = new Headers();\n    const context = await this.contextProvider.getContext();\n    if (context.authToken) {\n      headers.append('Authorization', 'Bearer ' + context.authToken);\n    }\n    if (context.instanceIdToken) {\n      headers.append('Firebase-Instance-ID-Token', context.instanceIdToken);\n    }\n\n    // Default timeout to 70s, but let the options override it.\n    const timeout = options.timeout || 70000;\n\n    const { timer, promise: failAfterPromise } = failAfter(timeout);\n\n    const response = await Promise.race([\n      clearTimeoutWrapper(timer, this.postJSON(url, body, headers)),\n      failAfterPromise,\n      clearTimeoutWrapper(timer, this.cancelAllRequests)\n    ]);\n\n    // If service was deleted, interrupted response throws an error.\n    if (!response) {\n      throw new HttpsErrorImpl(\n        'cancelled',\n        'Firebase Functions instance was deleted.'\n      );\n    }\n\n    // Check for an error status, regardless of http status.\n    const error = _errorForResponse(\n      response.status,\n      response.json,\n      this.serializer\n    );\n    if (error) {\n      throw error;\n    }\n\n    if (!response.json) {\n      throw new HttpsErrorImpl(\n        'internal',\n        'Response is not valid JSON object.'\n      );\n    }\n\n    let responseData = response.json.data;\n    // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n    // backwards compatibility.\n    if (typeof responseData === 'undefined') {\n      responseData = response.json.result;\n    }\n    if (typeof responseData === 'undefined') {\n      // Consider the response malformed.\n      throw new HttpsErrorImpl('internal', 'Response is missing data field.');\n    }\n\n    // Decode any special types, such as dates, in the returned data.\n    const decodedData = this.serializer.decode(responseData as {} | null);\n\n    return { data: decodedData };\n  }\n}\n\nasync function clearTimeoutWrapper<T>(\n  timer: number | NodeJS.Timeout,\n  promise: Promise<T>\n): Promise<T> {\n  const result = await promise;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  clearTimeout(timer as any);\n  return result;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Service } from './api/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\n\n/**\n * Type constant for Firebase Functions.\n */\nconst FUNCTIONS_TYPE = 'functions';\n\nfunction factory(container: ComponentContainer, region?: string): Service {\n  // Dependencies\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const messagingProvider = container.getProvider('messaging');\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new Service(app, authProvider, messagingProvider, region);\n}\n\nexport function registerFunctions(instance: _FirebaseNamespace): void {\n  const namespaceExports = {\n    // no-inline\n    Functions: Service\n  };\n  instance.INTERNAL.registerComponent(\n    new Component(FUNCTIONS_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport * as types from '@firebase/functions-types';\nimport { registerFunctions } from './src/config';\n\nimport { name, version } from './package.json';\n\nregisterFunctions(firebase as _FirebaseNamespace);\nfirebase.registerVersion(name, version);\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    functions?: {\n      (app?: FirebaseApp): types.FirebaseFunctions;\n      Functions: typeof types.FirebaseFunctions;\n    };\n  }\n  interface FirebaseApp {\n    functions?(region?: string): types.FirebaseFunctions;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}