{"ast":null,"code":"import { Observable, from } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction fromTask(task) {\n  return new Observable(function (subscriber) {\n    var progress = function progress(snap) {\n      return subscriber.next(snap);\n    };\n    var error = function error(e) {\n      return subscriber.error(e);\n    };\n    var complete = function complete() {\n      return subscriber.complete();\n    };\n    task.on('state_changed', progress, error, complete);\n    return function () {\n      return task.cancel();\n    };\n  });\n}\nfunction getDownloadURL(ref) {\n  return from(ref.getDownloadURL());\n}\n// TODO: fix storage typing in firebase, then apply the same fix here\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getMetadata(ref) {\n  return from(ref.getMetadata());\n}\nfunction put(ref,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndata, metadata) {\n  return fromTask(ref.put(data, metadata));\n}\nfunction putString(ref, data, format, metadata) {\n  return fromTask(ref.putString(data, format, metadata));\n}\nfunction percentage(task) {\n  return fromTask(task).pipe(map(function (s) {\n    return {\n      progress: s.bytesTransferred / s.totalBytes * 100,\n      snapshot: s\n    };\n  }));\n}\nexport { fromTask, getDownloadURL, getMetadata, percentage, put, putString };","map":{"version":3,"names":["fromTask","task","Observable","subscriber","progress","snap","next","error","e","complete","on","cancel","getDownloadURL","ref","from","getMetadata","put","data","metadata","putString","format","percentage","pipe","map","s","bytesTransferred","totalBytes","snapshot"],"sources":["../index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { storage } from 'firebase/app';\nimport { Observable, from } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport function fromTask(\n  task: storage.UploadTask\n): Observable<storage.UploadTaskSnapshot> {\n  return new Observable<storage.UploadTaskSnapshot>(subscriber => {\n    const progress = (snap: storage.UploadTaskSnapshot): void =>\n      subscriber.next(snap);\n    const error = (e: Error): void => subscriber.error(e);\n    const complete = (): void => subscriber.complete();\n    task.on('state_changed', progress, error, complete);\n    return () => task.cancel();\n  });\n}\n\nexport function getDownloadURL(ref: storage.Reference): Observable<string> {\n  return from(ref.getDownloadURL());\n}\n\n// TODO: fix storage typing in firebase, then apply the same fix here\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getMetadata(ref: storage.Reference): Observable<any> {\n  return from(ref.getMetadata());\n}\n\nexport function put(\n  ref: storage.Reference,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data: any,\n  metadata?: storage.UploadMetadata\n): Observable<storage.UploadTaskSnapshot> {\n  return fromTask(ref.put(data, metadata));\n}\n\nexport function putString(\n  ref: storage.Reference,\n  data: string,\n  format?: storage.StringFormat,\n  metadata?: storage.UploadMetadata\n): Observable<storage.UploadTaskSnapshot> {\n  return fromTask(ref.putString(data, format, metadata));\n}\n\nexport function percentage(\n  task: storage.UploadTask\n): Observable<{\n  progress: number;\n  snapshot: storage.UploadTaskSnapshot;\n}> {\n  return fromTask(task).pipe(\n    map(s => ({\n      progress: (s.bytesTransferred / s.totalBytes) * 100,\n      snapshot: s\n    }))\n  );\n}\n"],"mappings":";;;AAAA;;;;;;;;;;;;;;;;SAqBgBA,QAAQA,CACtBC,IAAwB;EAExB,OAAO,IAAIC,UAAU,CAA6B,UAAAC,UAAU;IAC1D,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAIC,IAAgC;MAChD,OAAAF,UAAU,CAACG,IAAI,CAACD,IAAI,CAAC;KAAA;IACvB,IAAME,KAAK,GAAG,SAARA,KAAKA,CAAIC,CAAQ;MAAW,OAAAL,UAAU,CAACI,KAAK,CAACC,CAAC,CAAC;IAAA;IACrD,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAA,EAAG;MAAY,OAAAN,UAAU,CAACM,QAAQ,EAAE;IAAA;IAClDR,IAAI,CAACS,EAAE,CAAC,eAAe,EAAEN,QAAQ,EAAEG,KAAK,EAAEE,QAAQ,CAAC;IACnD,OAAO;MAAM,OAAAR,IAAI,CAACU,MAAM,EAAE;IAAA;GAC3B,CAAC;AACJ;SAEgBC,cAAcA,CAACC,GAAsB;EACnD,OAAOC,IAAI,CAACD,GAAG,CAACD,cAAc,EAAE,CAAC;AACnC;AAEA;AACA;SACgBG,WAAWA,CAACF,GAAsB;EAChD,OAAOC,IAAI,CAACD,GAAG,CAACE,WAAW,EAAE,CAAC;AAChC;SAEgBC,GAAGA,CACjBH,GAAsB;AACtB;AACAI,IAAS,EACTC,QAAiC;EAEjC,OAAOlB,QAAQ,CAACa,GAAG,CAACG,GAAG,CAACC,IAAI,EAAEC,QAAQ,CAAC,CAAC;AAC1C;SAEgBC,SAASA,CACvBN,GAAsB,EACtBI,IAAY,EACZG,MAA6B,EAC7BF,QAAiC;EAEjC,OAAOlB,QAAQ,CAACa,GAAG,CAACM,SAAS,CAACF,IAAI,EAAEG,MAAM,EAAEF,QAAQ,CAAC,CAAC;AACxD;SAEgBG,UAAUA,CACxBpB,IAAwB;EAKxB,OAAOD,QAAQ,CAACC,IAAI,CAAC,CAACqB,IAAI,CACxBC,GAAG,CAAC,UAAAC,CAAC;IAAI,OAAC;MACRpB,QAAQ,EAAGoB,CAAC,CAACC,gBAAgB,GAAGD,CAAC,CAACE,UAAU,GAAI,GAAG;MACnDC,QAAQ,EAAEH;KACX;EAAA,CAAC,CAAC,CACJ;AACH"},"metadata":{},"sourceType":"module"}