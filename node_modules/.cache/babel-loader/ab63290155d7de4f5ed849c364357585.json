{"ast":null,"code":"import { Observable, merge, from, of } from 'rxjs';\nimport { delay, map, switchMap, scan, distinctUntilChanged } from 'rxjs/operators';\nimport { __assign, __spreadArrays } from 'tslib';\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Create an observable from a Database Reference or Database Query.\r\n * @param ref Database Reference\r\n * @param event Listen event type ('value', 'added', 'changed', 'removed', 'moved')\r\n */\nfunction fromRef(ref, event) {\n  return new Observable(function (subscriber) {\n    var fn = ref.on(event, function (snapshot, prevKey) {\n      subscriber.next({\n        snapshot: snapshot,\n        prevKey: prevKey,\n        event: event\n      });\n    }, subscriber.error.bind(subscriber));\n    return {\n      unsubscribe: function () {\n        ref.off(event, fn);\n      }\n    };\n  }).pipe(\n  // Ensures subscribe on observable is async. This handles\n  // a quirk in the SDK where on/once callbacks can happen\n  // synchronously.\n  delay(0));\n}\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ListenEvent;\n(function (ListenEvent) {\n  ListenEvent[\"added\"] = \"child_added\";\n  ListenEvent[\"removed\"] = \"child_removed\";\n  ListenEvent[\"changed\"] = \"child_changed\";\n  ListenEvent[\"moved\"] = \"child_moved\";\n  ListenEvent[\"value\"] = \"value\";\n})(ListenEvent || (ListenEvent = {}));\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Check the length of the provided array. If it is empty return an array\r\n * that is populated with all the Realtime Database child events.\r\n * @param events\r\n */\nfunction validateEventsArray(events) {\n  if (events == null || events.length === 0) {\n    events = [ListenEvent.added, ListenEvent.removed, ListenEvent.changed, ListenEvent.moved];\n  }\n  return events;\n}\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Get the snapshot changes of an object\r\n * @param query\r\n */\nfunction object(query) {\n  return fromRef(query, ListenEvent.value);\n}\n/**\r\n * Get an array of object values, optionally with a mapped key\r\n * @param query object ref or query\r\n * @param keyField map the object key to a specific field\r\n */\nfunction objectVal(query, keyField) {\n  return fromRef(query, ListenEvent.value).pipe(map(function (change) {\n    return changeToData(change, keyField);\n  }));\n}\nfunction changeToData(change, keyField) {\n  var _a;\n  var val = change.snapshot.val();\n  // val can be a primitive type\n  if (typeof val !== 'object') {\n    return val;\n  }\n  return __assign(__assign({}, val), keyField ? (_a = {}, _a[keyField] = change.snapshot.key, _a) : null);\n}\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction stateChanges(query, events) {\n  events = validateEventsArray(events);\n  var childEvent$ = events.map(function (event) {\n    return fromRef(query, event);\n  });\n  return merge.apply(void 0, childEvent$);\n}\nfunction fromOnce(query) {\n  return from(query.once(ListenEvent.value)).pipe(map(function (snapshot) {\n    var event = ListenEvent.value;\n    return {\n      snapshot: snapshot,\n      prevKey: null,\n      event: event\n    };\n  }));\n}\nfunction list(query, events) {\n  var eventsList = validateEventsArray(events);\n  return fromOnce(query).pipe(switchMap(function (change) {\n    var childEvent$ = [of(change)];\n    for (var _i = 0, eventsList_1 = eventsList; _i < eventsList_1.length; _i++) {\n      var event_1 = eventsList_1[_i];\n      childEvent$.push(fromRef(query, event_1));\n    }\n    return merge.apply(void 0, childEvent$).pipe(scan(buildView, []));\n  }), distinctUntilChanged());\n}\n/**\r\n * Get an object mapped to its value, and optionally its key\r\n * @param query object ref or query\r\n * @param keyField map the object key to a specific field\r\n */\nfunction listVal(query, keyField) {\n  return list(query).pipe(map(function (arr) {\n    return arr.map(function (change) {\n      return changeToData(change, keyField);\n    });\n  }));\n}\nfunction positionFor(changes, key) {\n  var len = changes.length;\n  for (var i = 0; i < len; i++) {\n    if (changes[i].snapshot.key === key) {\n      return i;\n    }\n  }\n  return -1;\n}\nfunction positionAfter(changes, prevKey) {\n  if (prevKey == null) {\n    return 0;\n  } else {\n    var i = positionFor(changes, prevKey);\n    if (i === -1) {\n      return changes.length;\n    } else {\n      return i + 1;\n    }\n  }\n}\nfunction buildView(current, change) {\n  var snapshot = change.snapshot,\n    prevKey = change.prevKey,\n    event = change.event;\n  var key = snapshot.key;\n  var currentKeyPosition = positionFor(current, key);\n  var afterPreviousKeyPosition = positionAfter(current, prevKey || undefined);\n  switch (event) {\n    case ListenEvent.value:\n      if (change.snapshot && change.snapshot.exists()) {\n        var prevKey_1 = null;\n        change.snapshot.forEach(function (snapshot) {\n          var action = {\n            snapshot: snapshot,\n            event: ListenEvent.value,\n            prevKey: prevKey_1\n          };\n          prevKey_1 = snapshot.key;\n          current = __spreadArrays(current, [action]);\n          return false;\n        });\n      }\n      return current;\n    case ListenEvent.added:\n      if (currentKeyPosition > -1) {\n        // check that the previouskey is what we expect, else reorder\n        var previous = current[currentKeyPosition - 1];\n        if ((previous && previous.snapshot.key || null) !== prevKey) {\n          current = current.filter(function (x) {\n            return x.snapshot.key !== snapshot.key;\n          });\n          current.splice(afterPreviousKeyPosition, 0, change);\n        }\n      } else if (prevKey == null) {\n        return __spreadArrays([change], current);\n      } else {\n        current = current.slice();\n        current.splice(afterPreviousKeyPosition, 0, change);\n      }\n      return current;\n    case ListenEvent.removed:\n      return current.filter(function (x) {\n        return x.snapshot.key !== snapshot.key;\n      });\n    case ListenEvent.changed:\n      return current.map(function (x) {\n        return x.snapshot.key === key ? change : x;\n      });\n    case ListenEvent.moved:\n      if (currentKeyPosition > -1) {\n        var data = current.splice(currentKeyPosition, 1)[0];\n        current = current.slice();\n        current.splice(afterPreviousKeyPosition, 0, data);\n        return current;\n      }\n      return current;\n    // default will also remove null results\n    default:\n      return current;\n  }\n}\nexport { ListenEvent, changeToData, fromRef, list, listVal, object, objectVal, stateChanges };","map":{"version":3,"names":["fromRef","ref","event","Observable","subscriber","fn","on","snapshot","prevKey","next","error","bind","unsubscribe","off","pipe","delay","ListenEvent","validateEventsArray","events","length","added","removed","changed","moved","object","query","value","objectVal","keyField","map","change","changeToData","val","__assign","_a","key","stateChanges","childEvent$","merge","apply","fromOnce","from","once","list","eventsList","switchMap","of","_i","eventsList_1","event_1","push","scan","buildView","distinctUntilChanged","listVal","arr","positionFor","changes","len","i","positionAfter","current","currentKeyPosition","afterPreviousKeyPosition","undefined","exists","prevKey_1","forEach","action","__spreadArrays","previous","filter","x","splice","slice","data"],"sources":["../fromRef.ts","../interfaces.ts","../utils.ts","../object/index.ts","../list/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { database } from 'firebase';\nimport { Observable } from 'rxjs';\nimport { delay } from 'rxjs/operators';\nimport { ListenEvent, QueryChange } from './interfaces';\n\n/**\n * Create an observable from a Database Reference or Database Query.\n * @param ref Database Reference\n * @param event Listen event type ('value', 'added', 'changed', 'removed', 'moved')\n */\nexport function fromRef(\n  ref: database.Query,\n  event: ListenEvent\n): Observable<QueryChange> {\n  return new Observable<QueryChange>(subscriber => {\n    const fn = ref.on(\n      event,\n      (snapshot, prevKey) => {\n        subscriber.next({ snapshot, prevKey, event });\n      },\n      subscriber.error.bind(subscriber)\n    );\n    return {\n      unsubscribe() {\n        ref.off(event, fn);\n      }\n    };\n  }).pipe(\n    // Ensures subscribe on observable is async. This handles\n    // a quirk in the SDK where on/once callbacks can happen\n    // synchronously.\n    delay(0)\n  );\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { database } from 'firebase';\n\nexport enum ListenEvent {\n  added = 'child_added',\n  removed = 'child_removed',\n  changed = 'child_changed',\n  moved = 'child_moved',\n  value = 'value'\n}\n\nexport interface QueryChange {\n  snapshot: database.DataSnapshot;\n  prevKey: string | null | undefined;\n  event: ListenEvent;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ListenEvent } from './interfaces';\n\n/**\n * Check the length of the provided array. If it is empty return an array\n * that is populated with all the Realtime Database child events.\n * @param events\n */\nexport function validateEventsArray(events?: ListenEvent[]): ListenEvent[] {\n  if (events == null || events.length === 0) {\n    events = [\n      ListenEvent.added,\n      ListenEvent.removed,\n      ListenEvent.changed,\n      ListenEvent.moved\n    ];\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { database } from 'firebase';\nimport { QueryChange, ListenEvent } from '../interfaces';\nimport { fromRef } from '../fromRef';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Get the snapshot changes of an object\n * @param query\n */\nexport function object(query: database.Query): Observable<QueryChange> {\n  return fromRef(query, ListenEvent.value);\n}\n\n/**\n * Get an array of object values, optionally with a mapped key\n * @param query object ref or query\n * @param keyField map the object key to a specific field\n */\nexport function objectVal<T>(\n  query: database.Query,\n  keyField?: string\n): Observable<T> {\n  return fromRef(query, ListenEvent.value).pipe(\n    map(change => changeToData(change, keyField) as T)\n  );\n}\n\nexport function changeToData(change: QueryChange, keyField?: string): {} {\n  const val = change.snapshot.val();\n\n  // val can be a primitive type\n  if (typeof val !== 'object') {\n    return val;\n  }\n\n  return {\n    ...val,\n    ...(keyField ? { [keyField]: change.snapshot.key } : null)\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { database } from 'firebase';\nimport { QueryChange, ListenEvent } from '../interfaces';\nimport { Observable, of, merge, from } from 'rxjs';\nimport { validateEventsArray } from '../utils';\nimport { fromRef } from '../fromRef';\nimport { switchMap, scan, distinctUntilChanged, map } from 'rxjs/operators';\nimport { changeToData } from '../object';\n\nexport function stateChanges(\n  query: database.Query,\n  events?: ListenEvent[]\n): Observable<QueryChange> {\n  events = validateEventsArray(events);\n  const childEvent$ = events.map(event => fromRef(query, event));\n  return merge(...childEvent$);\n}\n\nfunction fromOnce(query: database.Query): Observable<QueryChange> {\n  return from(query.once(ListenEvent.value)).pipe(\n    map(snapshot => {\n      const event = ListenEvent.value;\n      return { snapshot, prevKey: null, event };\n    })\n  );\n}\n\nexport function list(\n  query: database.Query,\n  events?: ListenEvent[]\n): Observable<QueryChange[]> {\n  const eventsList = validateEventsArray(events);\n  return fromOnce(query).pipe(\n    switchMap(change => {\n      const childEvent$ = [of(change)];\n      for (const event of eventsList) {\n        childEvent$.push(fromRef(query, event));\n      }\n      return merge(...childEvent$).pipe(scan(buildView, []));\n    }),\n    distinctUntilChanged()\n  );\n}\n\n/**\n * Get an object mapped to its value, and optionally its key\n * @param query object ref or query\n * @param keyField map the object key to a specific field\n */\nexport function listVal<T>(\n  query: database.Query,\n  keyField?: string\n): Observable<T[]> {\n  return list(query).pipe(\n    map(arr => arr.map(change => changeToData(change, keyField) as T))\n  );\n}\n\nfunction positionFor(changes: QueryChange[], key: string | null): number {\n  const len = changes.length;\n  for (let i = 0; i < len; i++) {\n    if (changes[i].snapshot.key === key) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction positionAfter(changes: QueryChange[], prevKey?: string): number {\n  if (prevKey == null) {\n    return 0;\n  } else {\n    const i = positionFor(changes, prevKey);\n    if (i === -1) {\n      return changes.length;\n    } else {\n      return i + 1;\n    }\n  }\n}\n\nfunction buildView(current: QueryChange[], change: QueryChange): QueryChange[] {\n  const { snapshot, prevKey, event } = change;\n  const { key } = snapshot;\n  const currentKeyPosition = positionFor(current, key);\n  const afterPreviousKeyPosition = positionAfter(current, prevKey || undefined);\n  switch (event) {\n    case ListenEvent.value:\n      if (change.snapshot && change.snapshot.exists()) {\n        let prevKey: string | null = null;\n        change.snapshot.forEach(snapshot => {\n          const action: QueryChange = {\n            snapshot,\n            event: ListenEvent.value,\n            prevKey\n          };\n          prevKey = snapshot.key;\n          current = [...current, action];\n          return false;\n        });\n      }\n      return current;\n    case ListenEvent.added:\n      if (currentKeyPosition > -1) {\n        // check that the previouskey is what we expect, else reorder\n        const previous = current[currentKeyPosition - 1];\n        if (((previous && previous.snapshot.key) || null) !== prevKey) {\n          current = current.filter(x => x.snapshot.key !== snapshot.key);\n          current.splice(afterPreviousKeyPosition, 0, change);\n        }\n      } else if (prevKey == null) {\n        return [change, ...current];\n      } else {\n        current = current.slice();\n        current.splice(afterPreviousKeyPosition, 0, change);\n      }\n      return current;\n    case ListenEvent.removed:\n      return current.filter(x => x.snapshot.key !== snapshot.key);\n    case ListenEvent.changed:\n      return current.map(x => (x.snapshot.key === key ? change : x));\n    case ListenEvent.moved:\n      if (currentKeyPosition > -1) {\n        const data = current.splice(currentKeyPosition, 1)[0];\n        current = current.slice();\n        current.splice(afterPreviousKeyPosition, 0, data);\n        return current;\n      }\n      return current;\n    // default will also remove null results\n    default:\n      return current;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}